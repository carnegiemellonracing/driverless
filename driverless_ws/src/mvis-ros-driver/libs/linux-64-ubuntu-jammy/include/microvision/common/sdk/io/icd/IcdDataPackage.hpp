//==============================================================================
//!\file
//!
//! \brief Data package for ICD protocol.
//!
//! $$MICROVISION_LICENSE_BEGIN$$
//! Copyright (c) 2025 MicroVision, Inc., Redmond, U.S.A.
//! All Rights Reserved.
//!
//! For more details, please refer to the accompanying file
//! License.txt.
//! $$MICROVISION_LICENSE_END$$
//!
//! \date May 11th, 2021
//------------------------------------------------------------------------------

#pragma once

#include <map>

#include <microvision/common/sdk/misc/defines/defines.hpp>

#include <microvision/common/sdk/io/DataPackage.hpp>
#include <microvision/common/sdk/datablocks/DataContainerBase.hpp>
#include <microvision/common/sdk/io/icd/IcdHeader.hpp>

//==============================================================================
namespace microvision {
namespace common {
namespace sdk {
//==============================================================================

//==============================================================================
//! \brief Package of serialized data and related meta information in ICD stream.
//!
//! The ICD protocol describes all datatypes by a name. Only some datatypes
//! are known in MVIS SDK so far. All others will be packed into custom data containers.
//!
//! \note The payload of an IcdDataPackage starts with an PerceptionDataInfo.
//! \note The custom data container UUID is generated by datatype name and version.
//------------------------------------------------------------------------------
class IcdDataPackage final : public DataPackage
{
public:
    //========================================
    //! \brief ICD measurement point list type name.
    //----------------------------------------
    static const MICROVISION_SDK_API std::string icdMplTypeName;

    //========================================
    //! \brief ICD performance type name.
    //----------------------------------------
    static const MICROVISION_SDK_API std::string icdPerformanceTypeName;

    //========================================
    //! \brief ICD transformation type name.
    //----------------------------------------
    static const MICROVISION_SDK_API std::string icdTransformationTypeName;

    //========================================
    //! \brief ICD custom data container type description text.
    //----------------------------------------
    static const MICROVISION_SDK_API std::string icdCustomDataTypeDescription;

    //========================================
    //! \brief ICD custom data container type description version text.
    //----------------------------------------
    static const MICROVISION_SDK_API std::string icdCustomDataTypeDescriptionVersion;

    //========================================
    //! \brief ICD custom data container type description type text.
    //----------------------------------------
    static const MICROVISION_SDK_API std::string icdCustomDataTypeDescriptionType;

    //========================================
    //! \brief ICD custom data container type description length text.
    //----------------------------------------
    static const MICROVISION_SDK_API std::string icdCustomDataTypeDescriptionLength;

    //========================================
    //! \brief ICD custom data container type description value text.
    //----------------------------------------
    static const MICROVISION_SDK_API std::string icdCustomDataTypeDescriptionValue;

    //========================================
    //! \brief Randomly generated namespace UUID. UUIDs per message type are generated from this namespace.
    //----------------------------------------
    constexpr static const MICROVISION_SDK_API char* icdNamespaceUuid = "643f4cd8-9413-538b-9b61-9b402c2e5571";

public:
    //========================================
    //! \brief Method to calculate a custom data container uuid for a packed ICD datatypes.
    //! \param[in] dataTypeName  Data type name used to calculate uuid.
    //! \param[in] major  Data type version major used to calculate uuid.
    //! \param[in] minor  Data type version minor used to calculate uuid.
    //! \returns The uuid matching to the given ICD datatype and version.
    //----------------------------------------
    static DataContainerBase::Uuid computeUuid(std::string dataTypeName, uint16_t major, uint16_t minor);

public:
    //========================================
    //! \brief Constructor with index, the source Uri, ICD datatype name, version, topic name and binary data payload.
    //! \param[in] index      Position in the data package stream, depends on source.
    //! \param[in] uri        Source Uri of data (stream).
    //! \param[in] header     ICD datatype information in icd header.
    //! \param[in] payload    Binary data chunk.
    //----------------------------------------
    IcdDataPackage(const int64_t index, const Uri& uri, const IcdHeader& header, const PayloadType& payload);

    //========================================
    //! \brief Default destructor.
    //----------------------------------------
    ~IcdDataPackage() override;

public:
    //========================================
    //! \brief Compare two ICD data packages for equality.
    //! \param[in] lhs  IcdDataPackage to compare.
    //! \param[in] rhs  IcdDataPackage to compare.
    //! \returns Either \c true if equals or otherwise \c false.
    //----------------------------------------
    friend bool operator==(const IcdDataPackage& lhs, const IcdDataPackage& rhs);

    //========================================
    //! \brief Compare two ICD data packages for inequality.
    //! \param[in] lhs  IcdDataPackage to compare.
    //! \param[in] rhs  IcdDataPackage to compare.
    //! \note Offset wont compare because of section compare.
    //! \returns Either \c true if unequals or otherwise \c false.
    //----------------------------------------
    friend bool operator!=(const IcdDataPackage& lhs, const IcdDataPackage& rhs);

public: //getter
    //========================================
    //! \brief Get icd header with information about contained icd datatype.
    //! \return Iutp header.
    //----------------------------------------
    const IcdHeader& getHeader() const;

public: //setter
    //========================================
    //! \brief Set icd header containing information about the ICD datatype.
    //! \param[in] header  Iutp datatype header.
    //----------------------------------------
    void setHeader(const IcdHeader& header);

private:
    //========================================
    //! \brief Header containing information about ICD datatype delivered within iutp packet.
    //----------------------------------------
    IcdHeader m_header;
};

//==============================================================================
//! \brief Nullable IcdDataPackage pointer.
//------------------------------------------------------------------------------
using IcdDataPackagePtr = std::shared_ptr<IcdDataPackage>;

//==============================================================================
} // namespace sdk
} // namespace common
} // namespace microvision
//==============================================================================
