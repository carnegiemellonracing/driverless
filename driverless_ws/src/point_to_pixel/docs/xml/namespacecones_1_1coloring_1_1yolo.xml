<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacecones_1_1coloring_1_1yolo" kind="namespace" language="C++">
    <compoundname>cones::coloring::yolo</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecones_1_1coloring_1_1yolo_1ad47b331375599bd4e1853d20186c05ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cones::coloring::yolo::get_cone_class</definition>
        <argsstring>(std::pair&lt; Eigen::Vector3d, Eigen::Vector3d &gt; pixel_pair, std::pair&lt; cv::Mat, cv::Mat &gt; frame_pair, std::pair&lt; std::vector&lt; cv::Mat &gt;, std::vector&lt; cv::Mat &gt;&gt; detection_pair, const cv::Scalar &amp;yellow_filter_low, const cv::Scalar &amp;yellow_filter_high, const cv::Scalar &amp;blue_filter_low, const cv::Scalar &amp;blue_filter_high, const cv::Scalar &amp;orange_filter_low, const cv::Scalar &amp;orange_filter_high, double confidence_threshold)</argsstring>
        <name>get_cone_class</name>
        <param>
          <type>std::pair&lt; Eigen::Vector3d, Eigen::Vector3d &gt;</type>
          <declname>pixel_pair</declname>
        </param>
        <param>
          <type>std::pair&lt; cv::Mat, cv::Mat &gt;</type>
          <declname>frame_pair</declname>
        </param>
        <param>
          <type>std::pair&lt; std::vector&lt; cv::Mat &gt;, std::vector&lt; cv::Mat &gt;&gt;</type>
          <declname>detection_pair</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>yellow_filter_low</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>yellow_filter_high</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>blue_filter_low</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>blue_filter_high</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>orange_filter_low</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>orange_filter_high</declname>
        </param>
        <param>
          <type>double</type>
          <declname>confidence_threshold</declname>
        </param>
        <briefdescription>
<para>Determines cone class from pixel pairs across cameras. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pixel_pair</parametername>
</parameternamelist>
<parameterdescription>
<para>Pixel coordinates in both cameras </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_pair</parametername>
</parameternamelist>
<parameterdescription>
<para>Frames from both cameras </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>detection_pair</parametername>
</parameternamelist>
<parameterdescription>
<para>YOLO detection results (if using YOLO) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yellow_filter_low</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower HSV bound for yellow detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yellow_filter_high</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper HSV bound for yellow detection <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue_filter_low</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower HSV bound for blue detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue_filter_high</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper HSV bound for blue detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orange_filter_low</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower HSV bound for orange detection <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orange_filter_high</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper HSV bound for orange detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>confidence_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum confidence to report a color </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int <ref refid="structcones_1_1Cone" kindref="compound">Cone</ref> class (-1=unknown, 0=orange, 1=yellow, 2=blue) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.cpp" line="7" column="9" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.cpp" bodystart="7" bodyend="51" declfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.hpp" declline="27" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecones_1_1coloring_1_1yolo_1ac52038a6bf7a85b10f2178c11310b9cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float cones::coloring::yolo::depth_to_box_height</definition>
        <argsstring>(float depth)</argsstring>
        <name>depth_to_box_height</name>
        <param>
          <type>float</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.cpp" line="53" column="11" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacecones_1_1coloring_1_1yolo_1accc12ea78aeb15a47591822d923f072e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; int, double &gt;</type>
        <definition>std::pair&lt; int, double &gt; cones::coloring::yolo::get_color</definition>
        <argsstring>(Eigen::Vector3d &amp;pixel, std::vector&lt; cv::Mat &gt; detection, int cols, int rows, double confidence_threshold)</argsstring>
        <name>get_color</name>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>std::vector&lt; cv::Mat &gt;</type>
          <declname>detection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>double</type>
          <declname>confidence_threshold</declname>
        </param>
        <briefdescription>
<para>Uses YOLO to determine cone color. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>The pixel location to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>detection</parametername>
</parameternamelist>
<parameterdescription>
<para>YOLO detection output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Image columns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Image rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>confidence_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum confidence to report a detection </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair&lt;int, double&gt; Color ID and confidence </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.cpp" line="58" column="15" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.cpp" bodystart="58" bodyend="148" declfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.hpp" declline="51" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="namespacecones_1_1coloring_1_1yolo_1ac828e5485662b02989345d91a85715d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cones::coloring::yolo::draw_bounding_boxes</definition>
        <argsstring>(cv::Mat &amp;frame, cv::Mat &amp;canvas, std::vector&lt; cv::Mat &gt; detections, int cols, int rows, double confidence_threshold)</argsstring>
        <name>draw_bounding_boxes</name>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>std::vector&lt; cv::Mat &gt;</type>
          <declname>detections</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>double</type>
          <declname>confidence_threshold</declname>
        </param>
        <briefdescription>
<para>Labels image frames with bounding boxes. Works with references. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>image frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>canvas</parametername>
</parameternamelist>
<parameterdescription>
<para>clone of image frame. Gets merged to image frame to have a see-through box </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>detections</parametername>
</parameternamelist>
<parameterdescription>
<para>output of YOLO model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Image columns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Image rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>confidence_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Use bounding box if YOLO conf is higher than threshold</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Nothing, directly applies bounding boxes to the input images. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.cpp" line="152" column="10" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.cpp" bodystart="152" bodyend="211" declfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.hpp" declline="71" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacecones_1_1coloring_1_1yolo_1a8357f4597130bfb12780db2c428483ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cv::dnn::Net</type>
        <definition>cv::dnn::Net cones::coloring::yolo::init_model</definition>
        <argsstring>(const std::string &amp;model_path)</argsstring>
        <name>init_model</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>model_path</declname>
        </param>
        <briefdescription>
<para>Initialize the YOLO model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model_path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the ONNX model file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cv::dnn::Net Initialized neural network </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.cpp" line="213" column="18" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.cpp" bodystart="213" bodyend="225" declfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.hpp" declline="86" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacecones_1_1coloring_1_1yolo_1a56653580e4a2bf7998921a0a4b638466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; cv::Mat &gt;</type>
        <definition>std::vector&lt; cv::Mat &gt; cones::coloring::yolo::process_frame</definition>
        <argsstring>(const cv::Mat &amp;frame, cv::dnn::Net &amp;net, int yolo_width=640, int yolo_height=640)</argsstring>
        <name>process_frame</name>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>cv::dnn::Net &amp;</type>
          <declname>net</declname>
        </param>
        <param>
          <type>int</type>
          <declname>yolo_width</declname>
          <defval>640</defval>
        </param>
        <param>
          <type>int</type>
          <declname>yolo_height</declname>
          <defval>640</defval>
        </param>
        <briefdescription>
<para>Process frame with YOLO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Input frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>net</parametername>
</parameternamelist>
<parameterdescription>
<para>Neural network </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yolo_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width for YOLO input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yolo_height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height for YOLO input </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float *detection results </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.cpp" line="227" column="17" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.cpp" bodystart="227" bodyend="256" declfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.hpp" declline="97" declcolumn="25"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/yolo.cpp" line="6" column="1"/>
  </compounddef>
</doxygen>
