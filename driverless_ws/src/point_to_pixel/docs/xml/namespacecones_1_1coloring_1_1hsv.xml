<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacecones_1_1coloring_1_1hsv" kind="namespace" language="C++">
    <compoundname>cones::coloring::hsv</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecones_1_1coloring_1_1hsv_1a7ed3b69f9ccbecea90188aeebfab01da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; int, double &gt;</type>
        <definition>std::pair&lt; int, double &gt; cones::coloring::hsv::get_color</definition>
        <argsstring>(Eigen::Vector3d &amp;pixel, cv::Mat image, const cv::Scalar &amp;yellow_filter_low, const cv::Scalar &amp;yellow_filter_high, const cv::Scalar &amp;blue_filter_low, const cv::Scalar &amp;blue_filter_high, const cv::Scalar &amp;orange_filter_low, const cv::Scalar &amp;orange_filter_high, double confidence_threshold)</argsstring>
        <name>get_color</name>
        <param>
          <type>Eigen::Vector3d &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>cv::Mat</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>yellow_filter_low</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>yellow_filter_high</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>blue_filter_low</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>blue_filter_high</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>orange_filter_low</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>orange_filter_high</declname>
        </param>
        <param>
          <type>double</type>
          <declname>confidence_threshold</declname>
        </param>
        <briefdescription>
<para>Uses HSV color filtering to determine cone color. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>The pixel location to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>The image to analyze </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yellow_filter_low</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower HSV bound for yellow detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yellow_filter_high</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper HSV bound for yellow detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue_filter_low</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower HSV bound for blue detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue_filter_high</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper HSV bound for blue detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orange_filter_low</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower HSV bound for orange detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orange_filter_high</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper HSV bound for orange detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>confidence_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum confidence to report a color </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair&lt;int, double&gt; Color ID (-1, 0=orange, 1=yellow, 2=blue) and confidence </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/hsv.cpp" line="60" column="23" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/hsv.cpp" bodystart="60" bodyend="141" declfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/hsv.hpp" declline="52" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="namespacecones_1_1coloring_1_1hsv_1a4f58efdef806d78d27e2ade8d6b665d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cones::coloring::hsv::get_cone_class</definition>
        <argsstring>(std::pair&lt; Eigen::Vector3d, Eigen::Vector3d &gt; pixel_pair, std::pair&lt; cv::Mat, cv::Mat &gt; frame_pair, std::pair&lt; std::vector&lt; cv::Mat &gt;, std::vector&lt; cv::Mat &gt;&gt; detection_pair, const cv::Scalar &amp;yellow_filter_low, const cv::Scalar &amp;yellow_filter_high, const cv::Scalar &amp;blue_filter_low, const cv::Scalar &amp;blue_filter_high, const cv::Scalar &amp;orange_filter_low, const cv::Scalar &amp;orange_filter_high, double confidence_threshold)</argsstring>
        <name>get_cone_class</name>
        <param>
          <type>std::pair&lt; Eigen::Vector3d, Eigen::Vector3d &gt;</type>
          <declname>pixel_pair</declname>
        </param>
        <param>
          <type>std::pair&lt; cv::Mat, cv::Mat &gt;</type>
          <declname>frame_pair</declname>
        </param>
        <param>
          <type>std::pair&lt; std::vector&lt; cv::Mat &gt;, std::vector&lt; cv::Mat &gt;&gt;</type>
          <declname>detection_pair</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>yellow_filter_low</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>yellow_filter_high</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>blue_filter_low</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>blue_filter_high</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>orange_filter_low</declname>
        </param>
        <param>
          <type>const cv::Scalar &amp;</type>
          <declname>orange_filter_high</declname>
        </param>
        <param>
          <type>double</type>
          <declname>confidence_threshold</declname>
        </param>
        <briefdescription>
<para>Determines cone class from pixel pairs across cameras. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pixel_pair</parametername>
</parameternamelist>
<parameterdescription>
<para>Pixel coordinates in both cameras </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_pair</parametername>
</parameternamelist>
<parameterdescription>
<para>Frames from both cameras </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>detection_pair</parametername>
</parameternamelist>
<parameterdescription>
<para>YOLO detection results (if using YOLO) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yellow_filter_low</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower HSV bound for yellow detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yellow_filter_high</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper HSV bound for yellow detection <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue_filter_low</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower HSV bound for blue detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue_filter_high</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper HSV bound for blue detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orange_filter_low</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower HSV bound for orange detection <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orange_filter_high</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper HSV bound for orange detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>confidence_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum confidence to report a color </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int <ref refid="structcones_1_1Cone" kindref="compound">Cone</ref> class (-1=unknown, 0=orange, 1=yellow, 2=blue) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/hsv.hpp" line="24" column="17" declfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/hsv.hpp" declline="24" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/point_to_pixel/src/cones/hsv.cpp" line="59" column="9"/>
  </compounddef>
</doxygen>
