<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="CMR__CPP__Pipeline_8cpp" kind="file" language="C++">
    <compoundname>CMR_CPP_Pipeline.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">numeric</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">vector</includes>
    <includes local="no">chrono</includes>
    <includes local="no">bits/stdc++.h</includes>
    <includes local="no">thread</includes>
    <includes local="no">atomic</includes>
    <includes local="yes">rclcpp/rclcpp.hpp</includes>
    <includes local="no">pcl/point_cloud.h</includes>
    <includes local="no">pcl/point_types.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">unordered_map</includes>
    <incdepgraph>
      <node id="11">
        <label>atomic</label>
      </node>
      <node id="14">
        <label>pcl/point_types.h</label>
      </node>
      <node id="9">
        <label>bits/stdc++.h</label>
      </node>
      <node id="13">
        <label>pcl/point_cloud.h</label>
      </node>
      <node id="1">
        <label>/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp</label>
        <link refid="CMR__CPP__Pipeline_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>numeric</label>
      </node>
      <node id="12">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="3">
        <label>fstream</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="4">
        <label>sstream</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="16">
        <label>unordered_map</label>
      </node>
      <node id="8">
        <label>chrono</label>
      </node>
      <node id="10">
        <label>thread</label>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innerclass refid="structradial" prot="public">radial</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
    <innernamespace refid="namespacepcl">pcl</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="CMR__CPP__Pipeline_8cpp_1a525335710b53cb064ca56b936120431e" prot="public" static="no">
        <name>_USE_MATH_DEFINES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="16" column="9" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="CMR__CPP__Pipeline_8cpp_1a1298c2d4177a95bf81386614feb957e3" prot="public" static="no">
        <type>struct <ref refid="structradial" kindref="compound">radial</ref></type>
        <definition>typedef struct radial radial_t</definition>
        <argsstring></argsstring>
        <name>radial_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="31" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="CMR__CPP__Pipeline_8cpp_1a5da8b8a2ab5f5b8ea714601657fbb79f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="CMR__CPP__Pipeline_8cpp_1a1298c2d4177a95bf81386614feb957e3" kindref="member">radial_t</ref></type>
        <definition>radial_t point2radial</definition>
        <argsstring>(PointXYZ pt)</argsstring>
        <name>point2radial</name>
        <param>
          <type>PointXYZ</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts (x,y,z) to (radius,ang,z), where ang is in radians <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y,z) point to convert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the converted point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="38" column="17" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="CMR__CPP__Pipeline_8cpp_1a55433f48558ff3c0397cc7fe0a44a4d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PointXYZ</type>
        <definition>PointXYZ radial2point</definition>
        <argsstring>(radial_t rd)</argsstring>
        <name>radial2point</name>
        <param>
          <type><ref refid="CMR__CPP__Pipeline_8cpp_1a1298c2d4177a95bf81386614feb957e3" kindref="member">radial_t</ref></type>
          <declname>rd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts (radius,ang,z) to (x,y,z), where ang is in radians <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rd</parametername>
</parameternamelist>
<parameterdescription>
<para>The (radius,ang,z) point to convert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the converted point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="51" column="17" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="51" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="CMR__CPP__Pipeline_8cpp_1a350017a41589e4efedff158aa6a6e1b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="CMR__CPP__Pipeline_8cpp_1a1298c2d4177a95bf81386614feb957e3" kindref="member">radial_t</ref></type>
        <definition>radial_t min_height</definition>
        <argsstring>(vector&lt; radial_t &gt; bin)</argsstring>
        <name>min_height</name>
        <param>
          <type>vector&lt; <ref refid="CMR__CPP__Pipeline_8cpp_1a1298c2d4177a95bf81386614feb957e3" kindref="member">radial_t</ref> &gt;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the minimum point in a bin <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bin</parametername>
</parameternamelist>
<parameterdescription>
<para>The bin to search </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the point with the lowest z </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="64" column="17" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="64" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="CMR__CPP__Pipeline_8cpp_1a2cb979ffdd82621e9536054435c9bb23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PointCloud&lt; PointXYZ &gt;</type>
        <definition>PointCloud&lt;PointXYZ&gt; GraceAndConrad</definition>
        <argsstring>(PointCloud&lt; PointXYZ &gt; cloud, double alpha, int num_bins, double height_threshold)</argsstring>
        <name>GraceAndConrad</name>
        <param>
          <type>PointCloud&lt; PointXYZ &gt;</type>
          <declname>cloud</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_bins</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height_threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function implementing the GraceAndConrad algorithm <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cloud</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vector of rectangular points to parse </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of each segment (radians) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bins</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bins per segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Keep all points this distance above the best fit line </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A point cloud of ground-filtered points </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="88" column="19" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="88" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="CMR__CPP__Pipeline_8cpp_1ac22081d10dce89c46ca4c2508a3a3a67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double euclideanDistance</definition>
        <argsstring>(const PointXYZ &amp;a, const PointXYZ &amp;b)</argsstring>
        <name>euclideanDistance</name>
        <param>
          <type>const PointXYZ &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const PointXYZ &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="173" column="15" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="173" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="CMR__CPP__Pipeline_8cpp_1a76481b130a0413b3525a788692cce1ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; int &gt;</type>
        <definition>vector&lt;int&gt; regionQuery</definition>
        <argsstring>(PointCloud&lt; PointXYZ &gt; &amp;cloud, const PointXYZ &amp;point, double epsilon)</argsstring>
        <name>regionQuery</name>
        <param>
          <type>PointCloud&lt; PointXYZ &gt; &amp;</type>
          <declname>cloud</declname>
        </param>
        <param>
          <type>const PointXYZ &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="181" column="15" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="181" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="CMR__CPP__Pipeline_8cpp_1ae35c91df2078d0898756a075ff7d8e04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void expandCluster</definition>
        <argsstring>(PointCloud&lt; PointXYZ &gt; &amp;cloud, vector&lt; bool &gt; &amp;visited, vector&lt; int &gt; &amp;cluster, int point_idx, vector&lt; int &gt; &amp;neighbors, int cluster_id, double epsilon, int min_points)</argsstring>
        <name>expandCluster</name>
        <param>
          <type>PointCloud&lt; PointXYZ &gt; &amp;</type>
          <declname>cloud</declname>
        </param>
        <param>
          <type>vector&lt; bool &gt; &amp;</type>
          <declname>visited</declname>
        </param>
        <param>
          <type>vector&lt; int &gt; &amp;</type>
          <declname>cluster</declname>
        </param>
        <param>
          <type>int</type>
          <declname>point_idx</declname>
        </param>
        <param>
          <type>vector&lt; int &gt; &amp;</type>
          <declname>neighbors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cluster_id</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_points</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="196" column="13" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="196" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="CMR__CPP__Pipeline_8cpp_1abe534d631147feb1a2e2e248599b422f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PointCloud&lt; PointXYZ &gt;</type>
        <definition>PointCloud&lt;PointXYZ&gt; computeCentroids</definition>
        <argsstring>(PointCloud&lt; PointXYZ &gt; &amp;cloud, const unordered_map&lt; int, vector&lt; int &gt;&gt; &amp;clusters)</argsstring>
        <name>computeCentroids</name>
        <param>
          <type>PointCloud&lt; PointXYZ &gt; &amp;</type>
          <declname>cloud</declname>
        </param>
        <param>
          <type>const unordered_map&lt; int, vector&lt; int &gt;&gt; &amp;</type>
          <declname>clusters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="225" column="19" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="225" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="CMR__CPP__Pipeline_8cpp_1a5bb0f85f02287ddfeadef0f3b18e531e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PointCloud&lt; PointXYZ &gt;</type>
        <definition>PointCloud&lt;PointXYZ&gt; DBSCAN</definition>
        <argsstring>(PointCloud&lt; PointXYZ &gt; &amp;cloud, double epsilon, int min_points)</argsstring>
        <name>DBSCAN</name>
        <param>
          <type>PointCloud&lt; PointXYZ &gt; &amp;</type>
          <declname>cloud</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_points</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="250" column="19" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="250" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="CMR__CPP__Pipeline_8cpp_1a65cc4c4b6206a8469602e9ec8dccdd7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PointCloud&lt; PointXYZ &gt;</type>
        <definition>PointCloud&lt;PointXYZ&gt; DBSCAN2</definition>
        <argsstring>(PointCloud&lt; PointXYZ &gt; &amp;cloud, double epsilon, int min_points)</argsstring>
        <name>DBSCAN2</name>
        <param>
          <type>PointCloud&lt; PointXYZ &gt; &amp;</type>
          <declname>cloud</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_points</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="284" column="19" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="284" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="CMR__CPP__Pipeline_8cpp_1a6c5bb975d914eb60b0cb8abfab42514a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>interfaces::msg::ConeArray</type>
        <definition>interfaces::msg::ConeArray color_cones_without_camera</definition>
        <argsstring>(const PointCloud&lt; PointXYZ &gt; &amp;cloud)</argsstring>
        <name>color_cones_without_camera</name>
        <param>
          <type>const PointCloud&lt; PointXYZ &gt; &amp;</type>
          <declname>cloud</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="310" column="35" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="310" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="CMR__CPP__Pipeline_8cpp_1a4f0f14404f3ecf954dd83d1fb1a780b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>interfaces::msg::ConeArray</type>
        <definition>interfaces::msg::ConeArray run_pipeline_dark</definition>
        <argsstring>(PointCloud&lt; PointXYZ &gt; &amp;cloud, double alpha, int num_bins, double height_threshold, double epsilon, int min_points, double epsilon2, int min_points2, const rclcpp::Logger &amp;logger)</argsstring>
        <name>run_pipeline_dark</name>
        <param>
          <type>PointCloud&lt; PointXYZ &gt; &amp;</type>
          <declname>cloud</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_bins</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height_threshold</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_points</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_points2</declname>
        </param>
        <param>
          <type>const rclcpp::Logger &amp;</type>
          <declname>logger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="420" column="35" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="420" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="CMR__CPP__Pipeline_8cpp_1a53d26bd8c189e2b625e2c1242a9b1fe9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PointCloud&lt; PointXYZ &gt;</type>
        <definition>PointCloud&lt;PointXYZ&gt; run_pipeline</definition>
        <argsstring>(PointCloud&lt; PointXYZ &gt; &amp;cloud, double alpha, int num_bins, double height_threshold, double epsilon, int min_points, double epsilon2, int min_points2, const rclcpp::Logger &amp;logger)</argsstring>
        <name>run_pipeline</name>
        <param>
          <type>PointCloud&lt; PointXYZ &gt; &amp;</type>
          <declname>cloud</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_bins</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height_threshold</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_points</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_points2</declname>
        </param>
        <param>
          <type>const rclcpp::Logger &amp;</type>
          <declname>logger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" line="474" column="21" bodyfile="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp" bodystart="474" bodyend="511"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bits/stdc++.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rclcpp/rclcpp.hpp&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>For<sp/>propper<sp/>logging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pcl/point_cloud.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pcl/point_types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::chrono::high_resolution_clock;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::chrono::duration_cast;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::chrono::duration;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::chrono::milliseconds;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">pcl;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="structradial" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structradial" kindref="compound">radial</ref><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radius;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a1298c2d4177a95bf81386614feb957e3" kindref="member">radial_t</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structradial" kindref="compound">radial_t</ref><sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a5da8b8a2ab5f5b8ea714601657fbb79f" kindref="member">point2radial</ref>(PointXYZ<sp/>pt)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><ref refid="structradial" kindref="compound">radial_t</ref><sp/>rd;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>rd.<ref refid="structradial_1aa95b7615a058ef6c9138ed718dbd8e43" kindref="member">angle</ref><sp/>=<sp/>std::atan2(pt.y,<sp/>pt.x);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>rd.<ref refid="structradial_1a291d97c034828ebe096891db5a763108" kindref="member">radius</ref><sp/>=<sp/>std::sqrt(pt.x<sp/>*<sp/>pt.x<sp/>+<sp/>pt.y<sp/>*<sp/>pt.y);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>rd.<ref refid="structradial_1a701242383c0deaae2163442d3508596c" kindref="member">z</ref><sp/>=<sp/>pt.z;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rd;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PointXYZ<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a55433f48558ff3c0397cc7fe0a44a4d4" kindref="member">radial2point</ref>(<ref refid="structradial" kindref="compound">radial_t</ref><sp/>rd)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>PointXYZ<sp/>pt;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>pt.x<sp/>=<sp/>rd.<ref refid="structradial_1a291d97c034828ebe096891db5a763108" kindref="member">radius</ref><sp/>*<sp/>cos(rd.<ref refid="structradial_1aa95b7615a058ef6c9138ed718dbd8e43" kindref="member">angle</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>pt.y<sp/>=<sp/>rd.<ref refid="structradial_1a291d97c034828ebe096891db5a763108" kindref="member">radius</ref><sp/>*<sp/>sin(rd.<ref refid="structradial_1aa95b7615a058ef6c9138ed718dbd8e43" kindref="member">angle</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>pt.z<sp/>=<sp/>rd.<ref refid="structradial_1a701242383c0deaae2163442d3508596c" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pt;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structradial" kindref="compound">radial_t</ref><sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a350017a41589e4efedff158aa6a6e1b7" kindref="member">min_height</ref>(vector&lt;radial_t&gt;<sp/>bin)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>bin.size();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{-100,<sp/>-100,<sp/>-100};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="structradial" kindref="compound">radial_t</ref><sp/>mini<sp/>=<sp/>bin[0];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structradial" kindref="compound">radial_t</ref><sp/>rd<sp/>=<sp/>bin[i];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rd.<ref refid="structradial_1a701242383c0deaae2163442d3508596c" kindref="member">z</ref><sp/>&lt;<sp/>mini.<ref refid="structradial_1a701242383c0deaae2163442d3508596c" kindref="member">z</ref>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mini<sp/>=<sp/>rd;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mini;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PointCloud&lt;PointXYZ&gt;<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a2cb979ffdd82621e9536054435c9bb23" kindref="member">GraceAndConrad</ref>(PointCloud&lt;PointXYZ&gt;<sp/>cloud,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha,<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bins,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>height_threshold)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upper_height_threshold<sp/>=<sp/>0.2;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle_min<sp/>=<sp/>-0.5<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle_max<sp/>=<sp/>0.5<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radius_max<sp/>=<sp/>15;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_segs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((angle_max<sp/>-<sp/>angle_min)<sp/>/<sp/>alpha);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>vector&lt;vector&lt;vector&lt;radial_t&gt;&gt;&gt;<sp/>segments(num_segs,<sp/>vector&lt;vector&lt;radial_t&gt;&gt;(num_bins));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//&amp;&amp;<sp/>rd.angle<sp/>&gt;<sp/>-4<sp/>*<sp/>(M_PI/9)<sp/>&amp;&amp;<sp/>rd.angle<sp/>&lt;<sp/>4<sp/>*<sp/>(M_PI/9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>PointCloud&lt;PointXYZ&gt;<sp/>output;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>all<sp/>points<sp/>from<sp/>XYZ<sp/>to<sp/>radial,Z<sp/>and<sp/>separate<sp/>into<sp/>bins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>csize<sp/>=<sp/>cloud.points.size();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>csize;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>PointXYZ<sp/>pt<sp/>=<sp/>cloud.points[i];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structradial" kindref="compound">radial_t</ref><sp/>rd<sp/>=<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a5da8b8a2ab5f5b8ea714601657fbb79f" kindref="member">point2radial</ref>(pt);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rd.<ref refid="structradial_1a291d97c034828ebe096891db5a763108" kindref="member">radius</ref><sp/>&lt;<sp/>radius_max)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seg_index<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rd.<ref refid="structradial_1aa95b7615a058ef6c9138ed718dbd8e43" kindref="member">angle</ref><sp/>/<sp/>alpha)<sp/>+<sp/>num_segs<sp/>/<sp/>2<sp/>-<sp/>(rd.<ref refid="structradial_1aa95b7615a058ef6c9138ed718dbd8e43" kindref="member">angle</ref><sp/>&lt;<sp/>0);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_index<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rd.<ref refid="structradial_1a291d97c034828ebe096891db5a763108" kindref="member">radius</ref><sp/>/<sp/>(radius_max<sp/>/<sp/>num_bins));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg_index<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seg_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seg_index<sp/>&gt;=<sp/>num_segs)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seg_index<sp/>=<sp/>num_segs<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segments[seg_index][bin_index].push_back(rd);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>line<sp/>is<sp/>doubling<sp/>the<sp/>execution<sp/>time<sp/>of<sp/>sector<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Grace<sp/>and<sp/>Conrad<sp/>Algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seg<sp/>=<sp/>0;<sp/>seg<sp/>&lt;<sp/>num_segs;<sp/>seg++)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>minimum<sp/>points<sp/>in<sp/>each<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>minis_rad<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>minis_z<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin<sp/>&lt;<sp/>num_bins;<sp/>bin++)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structradial" kindref="compound">radial_t</ref><sp/>mini<sp/>=<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a350017a41589e4efedff158aa6a6e1b7" kindref="member">min_height</ref>(segments[seg][bin]);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mini.<ref refid="structradial_1a291d97c034828ebe096891db5a763108" kindref="member">radius</ref><sp/>!=<sp/>-100)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minis_rad.push_back(mini.<ref refid="structradial_1a291d97c034828ebe096891db5a763108" kindref="member">radius</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minis_z.push_back(mini.<ref refid="structradial_1a701242383c0deaae2163442d3508596c" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Performing<sp/>linear<sp/>regression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_rad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_rad2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_radz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>minis_rad.size();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rad<sp/>=<sp/>minis_rad[i];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>minis_z[i];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_rad<sp/>+=<sp/>rad;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_rad2<sp/>+=<sp/>rad<sp/>*<sp/>rad;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_z<sp/>+=<sp/>z;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_radz<sp/>+=<sp/>rad<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculating<sp/>slope<sp/>and<sp/>intercept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>slope<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>intercept<sp/>=<sp/>sum_z;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slope<sp/>=<sp/>(n<sp/>*<sp/>sum_radz<sp/>-<sp/>sum_rad<sp/>*<sp/>sum_z)<sp/>/<sp/>(n<sp/>*<sp/>sum_rad2<sp/>-<sp/>sum_rad<sp/>*<sp/>sum_rad);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intercept<sp/>=<sp/>(sum_z<sp/>-<sp/>slope<sp/>*<sp/>sum_rad)<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>all<sp/>correct<sp/>points<sp/>to<sp/>XYZ<sp/>and<sp/>push<sp/>to<sp/>output<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin<sp/>&lt;<sp/>num_bins;<sp/>bin++)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>segments[seg][bin].size()<sp/>-<sp/>1;<sp/>j<sp/>&gt;=<sp/>0;<sp/>j--)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structradial" kindref="compound">radial_t</ref><sp/>pt<sp/>=<sp/>segments[seg][bin][j];</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>low_cutoff<sp/>=<sp/>slope<sp/>*<sp/>pt.<ref refid="structradial_1a291d97c034828ebe096891db5a763108" kindref="member">radius</ref><sp/>+<sp/>intercept<sp/>+<sp/>height_threshold;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>high_cutoff<sp/>=<sp/>slope<sp/>*<sp/>pt.<ref refid="structradial_1a291d97c034828ebe096891db5a763108" kindref="member">radius</ref><sp/>+<sp/>intercept<sp/>+<sp/>upper_height_threshold;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pt.<ref refid="structradial_1a701242383c0deaae2163442d3508596c" kindref="member">z</ref><sp/>&gt;<sp/>low_cutoff<sp/>&amp;<sp/>pt.<ref refid="structradial_1a701242383c0deaae2163442d3508596c" kindref="member">z</ref><sp/>&lt;<sp/>high_cutoff)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.points.push_back(<ref refid="CMR__CPP__Pipeline_8cpp_1a55433f48558ff3c0397cc7fe0a44a4d4" kindref="member">radial2point</ref>(pt));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculates<sp/>Euclidean<sp/>distance<sp/>between<sp/>two<sp/>PointXYZ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="CMR__CPP__Pipeline_8cpp_1ac22081d10dce89c46ca4c2508a3a3a67" kindref="member">euclideanDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointXYZ<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointXYZ<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/>a.x<sp/>-<sp/>b.x;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/>a.y<sp/>-<sp/>b.y;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dz<sp/>=<sp/>a.z<sp/>-<sp/>b.z;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(dx<sp/>*<sp/>dx<sp/>+<sp/>dy<sp/>*<sp/>dy<sp/>+<sp/>dz<sp/>*<sp/>dz);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>indices<sp/>of<sp/>points<sp/>in<sp/>cloud<sp/>that<sp/>are<sp/>within<sp/>epsilon<sp/>of<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>vector&lt;int&gt;<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a76481b130a0413b3525a788692cce1ba" kindref="member">regionQuery</ref>(</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>PointCloud&lt;PointXYZ&gt;<sp/>&amp;cloud,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointXYZ<sp/>&amp;point,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>neighbors;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>neighbors.reserve(cloud.points.size());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cloud.points.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="CMR__CPP__Pipeline_8cpp_1ac22081d10dce89c46ca4c2508a3a3a67" kindref="member">euclideanDistance</ref>(point,<sp/>cloud.points[i])<sp/>&lt;=<sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>neighbors.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>neighbors;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Expands<sp/>the<sp/>cluster<sp/>by<sp/>checking<sp/>neighbors<sp/>and<sp/>assigning<sp/>them<sp/>as<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CMR__CPP__Pipeline_8cpp_1ae35c91df2078d0898756a075ff7d8e04" kindref="member">expandCluster</ref>(</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>PointCloud&lt;PointXYZ&gt;<sp/>&amp;cloud,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>vector&lt;bool&gt;<sp/>&amp;visited,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>&amp;cluster,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>point_idx,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>&amp;neighbors,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cluster_id,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_points)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>cluster[point_idx]<sp/>=<sp/>cluster_id;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>neighbors.size())<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neighbor_idx<sp/>=<sp/>neighbors[i];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!visited[neighbor_idx])<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>visited[neighbor_idx]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_neighbors<sp/>=<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a76481b130a0413b3525a788692cce1ba" kindref="member">regionQuery</ref>(cloud,<sp/>cloud.points[neighbor_idx],<sp/>epsilon);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_neighbors.size()<sp/>&gt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(min_points))<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neighbors.insert(neighbors.end(),<sp/>new_neighbors.begin(),<sp/>new_neighbors.end());</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cluster[neighbor_idx]<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster[neighbor_idx]<sp/>=<sp/>cluster_id;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>centroids<sp/>for<sp/>the<sp/>clusters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PointCloud&lt;PointXYZ&gt;<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1abe534d631147feb1a2e2e248599b422f" kindref="member">computeCentroids</ref>(</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>PointCloud&lt;PointXYZ&gt;<sp/>&amp;cloud,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>unordered_map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>vector&lt;int&gt;&gt;<sp/>&amp;clusters)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>PointCloud&lt;PointXYZ&gt;<sp/>centroids;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>centroids.points.reserve(clusters.size());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;kv<sp/>:<sp/>clusters)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;indices<sp/>=<sp/>kv.second;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_x<sp/>=<sp/>0.0,<sp/>sum_y<sp/>=<sp/>0.0,<sp/>sum_z<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>:<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_x<sp/>+=<sp/>cloud.points[idx].x;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_y<sp/>+=<sp/>cloud.points[idx].y;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_z<sp/>+=<sp/>cloud.points[idx].z;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(indices.size());</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>PointXYZ<sp/>centroid;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>centroid.x<sp/>=<sp/>sum_x<sp/>/<sp/>size;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>centroid.y<sp/>=<sp/>sum_y<sp/>/<sp/>size;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>centroid.z<sp/>=<sp/>sum_z<sp/>/<sp/>size;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>centroids.points.push_back(centroid);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>centroids;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DBSCAN<sp/>that<sp/>works<sp/>on<sp/>a<sp/>PointCloud&lt;PointXYZ&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PointCloud&lt;PointXYZ&gt;<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a5bb0f85f02287ddfeadef0f3b18e531e" kindref="member">DBSCAN</ref>(PointCloud&lt;PointXYZ&gt;<sp/>&amp;cloud,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_points)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>vector&lt;bool&gt;<sp/>visited(cloud.points.size(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>cluster(cloud.points.size(),<sp/>-1);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cluster_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cloud.points.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visited[i])<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>visited[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>neighbors<sp/>=<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a76481b130a0413b3525a788692cce1ba" kindref="member">regionQuery</ref>(cloud,<sp/>cloud.points[i],<sp/>epsilon);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neighbors.size()<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(min_points))<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster[i]<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>as<sp/>noise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++cluster_id;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CMR__CPP__Pipeline_8cpp_1ae35c91df2078d0898756a075ff7d8e04" kindref="member">expandCluster</ref>(cloud,<sp/>visited,<sp/>cluster,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i),<sp/>neighbors,<sp/>cluster_id,<sp/>epsilon,<sp/>min_points);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Collect<sp/>cluster<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>unordered_map&lt;int,<sp/>vector&lt;int&gt;&gt;<sp/>clusters;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cluster.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cluster[i]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusters[cluster[i]].push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="CMR__CPP__Pipeline_8cpp_1abe534d631147feb1a2e2e248599b422f" kindref="member">computeCentroids</ref>(cloud,<sp/>clusters);</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//Use<sp/>for<sp/>secondary<sp/>filtering<sp/>to<sp/>get<sp/>rid<sp/>of<sp/>extraneous<sp/>clusters<sp/>outside<sp/>of<sp/>cones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PointCloud&lt;PointXYZ&gt;<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a65cc4c4b6206a8469602e9ec8dccdd7b" kindref="member">DBSCAN2</ref>(PointCloud&lt;PointXYZ&gt;<sp/>&amp;cloud,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_points)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>visited[i]<sp/>indicates<sp/>whether<sp/>the<sp/>point<sp/>has<sp/>been<sp/>visited.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cluster[i]<sp/>=<sp/>-1<sp/>for<sp/>unclassified,<sp/>0<sp/>for<sp/>noise,<sp/>&gt;0<sp/>for<sp/>cluster<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>vector&lt;bool&gt;<sp/>visited(cloud.points.size(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>cluster(cloud.points.size(),<sp/>-1);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cluster_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cloud.points.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visited[i])<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>visited[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>neighbors<sp/>=<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a76481b130a0413b3525a788692cce1ba" kindref="member">regionQuery</ref>(cloud,<sp/>cloud.points[i],<sp/>epsilon);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neighbors.size()<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(min_points))<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster[i]<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>as<sp/>noise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++cluster_id;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CMR__CPP__Pipeline_8cpp_1ae35c91df2078d0898756a075ff7d8e04" kindref="member">expandCluster</ref>(cloud,<sp/>visited,<sp/>cluster,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i),<sp/>neighbors,<sp/>cluster_id,<sp/>epsilon,<sp/>min_points);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cloud;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>interfaces::msg::ConeArray<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a6c5bb975d914eb60b0cb8abfab42514a" kindref="member">color_cones_without_camera</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PointCloud&lt;PointXYZ&gt;&amp;<sp/>cloud)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>interfaces::msg::ConeArray<sp/>message<sp/>=<sp/>interfaces::msg::ConeArray();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>message.blue_cones<sp/>=<sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>{};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>message.yellow_cones<sp/>=<sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>{};</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>message.orange_cones<sp/>=<sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>{};</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>processed_cones(cloud.points.size(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>processed_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total_cones<sp/>=<sp/>cloud.points.size();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_distance_left<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_distance_right<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_left_idx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_right_idx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cloud.points.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>point<sp/>=<sp/>cloud.points[i];</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>std::sqrt(std::pow(point.x,<sp/>2)<sp/>+<sp/>std::pow(point.y,<sp/>2));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point.x<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>distance<sp/>&lt;<sp/>min_distance_left)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_distance_left<sp/>=<sp/>distance;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_left_idx<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point.x<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>distance<sp/>&lt;<sp/>min_distance_right)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_distance_right<sp/>=<sp/>distance;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_right_idx<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initial_left_idx<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>cloud.points[initial_left_idx].x;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>cloud.points[initial_left_idx].y;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.z<sp/>=<sp/>cloud.points[initial_left_idx].z;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message.blue_cones.push_back(p);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processed_cones[initial_left_idx]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processed_count++;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initial_right_idx<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>cloud.points[initial_right_idx].x;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>cloud.points[initial_right_idx].y;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.z<sp/>=<sp/>cloud.points[initial_right_idx].z;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message.yellow_cones.push_back(p);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processed_cones[initial_right_idx]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processed_count++;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>PointXYZ<sp/>current_left_cone<sp/>=<sp/>cloud.points[initial_left_idx];</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>PointXYZ<sp/>current_right_cone<sp/>=<sp/>cloud.points[initial_right_idx];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(processed_count<sp/>&lt;<sp/>total_cones)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_distance_left<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_distance_right<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_left_idx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_right_idx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cloud.points.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!processed_cones[i])<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>point<sp/>=<sp/>cloud.points[i];</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance_to_left<sp/>=<sp/>std::sqrt(</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pow(point.x<sp/>-<sp/>current_left_cone.x,<sp/>2)<sp/>+<sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pow(point.y<sp/>-<sp/>current_left_cone.y,<sp/>2)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance_to_left<sp/>&lt;<sp/>min_distance_left)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_distance_left<sp/>=<sp/>distance_to_left;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_left_idx<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance_to_right<sp/>=<sp/>std::sqrt(</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pow(point.x<sp/>-<sp/>current_right_cone.x,<sp/>2)<sp/>+<sp/></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pow(point.y<sp/>-<sp/>current_right_cone.y,<sp/>2)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance_to_right<sp/>&lt;<sp/>min_distance_right)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_distance_right<sp/>=<sp/>distance_to_right;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_right_idx<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_left_idx<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>next_right_idx<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_left_idx<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_left_cone<sp/>=<sp/>cloud.points[next_left_idx];</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>current_left_cone.x;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>current_left_cone.y;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.z<sp/>=<sp/>current_left_cone.z;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message.blue_cones.push_back(p);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processed_cones[next_left_idx]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processed_count++;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_right_idx<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_right_cone<sp/>=<sp/>cloud.points[next_right_idx];</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>current_right_cone.x;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>current_right_cone.y;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.z<sp/>=<sp/>current_right_cone.z;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message.yellow_cones.push_back(p);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processed_cones[next_right_idx]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processed_count++;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>interfaces::msg::ConeArray<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a4f0f14404f3ecf954dd83d1fb1a780b8" kindref="member">run_pipeline_dark</ref>(PointCloud&lt;PointXYZ&gt;<sp/>&amp;cloud,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha,<sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bins,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>height_threshold,<sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_points,<sp/></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_points2,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rclcpp::Logger<sp/>&amp;logger)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>overall<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_pipeline<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>entry<sp/>sizetime:<sp/>36.776<sp/>of<sp/>the<sp/>cloud</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Entry<sp/>Size:<sp/>%zu\n&quot;</highlight><highlight class="normal">,<sp/>cloud.size());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>GraceAndConrad<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_GNC<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>PointCloud&lt;PointXYZ&gt;<sp/>GNC_cloud<sp/>=<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a2cb979ffdd82621e9536054435c9bb23" kindref="member">GraceAndConrad</ref>(cloud,<sp/>alpha,<sp/>num_bins,<sp/>height_threshold);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_GNC<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double,<sp/>std::milli&gt;<sp/>duration_GNC<sp/>=<sp/>end_GNC<sp/>-<sp/>start_GNC;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_INFO(logger,<sp/></highlight><highlight class="stringliteral">&quot;GraceAndConrad<sp/>time:<sp/>%fms&quot;</highlight><highlight class="normal">,<sp/>duration_GNC.count());</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>DBSCAN<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_DBSCAN<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>PointCloud&lt;PointXYZ&gt;<sp/>clustered_cloud<sp/>=<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a5bb0f85f02287ddfeadef0f3b18e531e" kindref="member">DBSCAN</ref>(GNC_cloud,<sp/>epsilon,<sp/>min_points);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_DBSCAN<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double,<sp/>std::milli&gt;<sp/>duration_DBSCAN<sp/>=<sp/>end_DBSCAN<sp/>-<sp/>start_DBSCAN;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_INFO(logger,<sp/></highlight><highlight class="stringliteral">&quot;DBSCAN<sp/>time:<sp/>%fms&quot;</highlight><highlight class="normal">,<sp/>duration_DBSCAN.count());</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>DBSCAN2<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_DBSCAN2<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>PointCloud&lt;PointXYZ&gt;<sp/>filtered_cloud<sp/>=<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a65cc4c4b6206a8469602e9ec8dccdd7b" kindref="member">DBSCAN2</ref>(clustered_cloud,<sp/>epsilon2,<sp/>min_points2);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_DBSCAN2<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double,<sp/>std::milli&gt;<sp/>duration_DBSCAN2<sp/>=<sp/>end_DBSCAN2<sp/>-<sp/>start_DBSCAN2;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_INFO(logger,<sp/></highlight><highlight class="stringliteral">&quot;DBSCAN2<sp/>time:<sp/>%fms&quot;</highlight><highlight class="normal">,<sp/>duration_DBSCAN2.count());</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>the<sp/>overall<sp/>pipeline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_pipeline<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double,<sp/>std::milli&gt;<sp/>duration_pipeline<sp/>=<sp/>end_pipeline<sp/>-<sp/>start_pipeline;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_INFO(logger,<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>pipeline<sp/>time:<sp/>%fms&quot;</highlight><highlight class="normal">,<sp/>duration_pipeline.count());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>filtered_cloud.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>original_x<sp/>=<sp/>filtered_cloud.points[i].x;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>original_y<sp/>=<sp/>filtered_cloud.points[i].y;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>original_z<sp/>=<sp/>filtered_cloud.points[i].z;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filtered_cloud.points[i].x<sp/>=<sp/>-original_y;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filtered_cloud.points[i].y<sp/>=<sp/>original_x;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filtered_cloud.points[i].z<sp/>=<sp/>original_z;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>interfaces::msg::ConeArray<sp/>message<sp/>=<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a6c5bb975d914eb60b0cb8abfab42514a" kindref="member">color_cones_without_camera</ref>(filtered_cloud);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>PointCloud&lt;PointXYZ&gt;<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a53d26bd8c189e2b625e2c1242a9b1fe9" kindref="member">run_pipeline</ref>(PointCloud&lt;PointXYZ&gt;<sp/>&amp;cloud,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bins,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>height_threshold,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_points,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_points2,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rclcpp::Logger<sp/>&amp;logger)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>overall<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_pipeline<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>GraceAndConrad<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_GNC<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>PointCloud&lt;PointXYZ&gt;<sp/>GNC_cloud<sp/>=<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a2cb979ffdd82621e9536054435c9bb23" kindref="member">GraceAndConrad</ref>(cloud,<sp/>alpha,<sp/>num_bins,<sp/>height_threshold);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_GNC<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double,<sp/>std::milli&gt;<sp/>duration_GNC<sp/>=<sp/>end_GNC<sp/>-<sp/>start_GNC;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_INFO(logger,<sp/></highlight><highlight class="stringliteral">&quot;GraceAndConrad<sp/>time:<sp/>%fms&quot;</highlight><highlight class="normal">,<sp/>duration_GNC.count());</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>DBSCAN<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_DBSCAN<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>PointCloud&lt;PointXYZ&gt;<sp/>clustered_cloud<sp/>=<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a5bb0f85f02287ddfeadef0f3b18e531e" kindref="member">DBSCAN</ref>(GNC_cloud,<sp/>epsilon,<sp/>min_points);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_DBSCAN<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double,<sp/>std::milli&gt;<sp/>duration_DBSCAN<sp/>=<sp/>end_DBSCAN<sp/>-<sp/>start_DBSCAN;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_INFO(logger,<sp/></highlight><highlight class="stringliteral">&quot;DBSCAN<sp/>time:<sp/>%fms&quot;</highlight><highlight class="normal">,<sp/>duration_DBSCAN.count());</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>DBSCAN2<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_DBSCAN2<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>PointCloud&lt;PointXYZ&gt;<sp/>filtered_cloud<sp/>=<sp/><ref refid="CMR__CPP__Pipeline_8cpp_1a65cc4c4b6206a8469602e9ec8dccdd7b" kindref="member">DBSCAN2</ref>(clustered_cloud,<sp/>epsilon2,<sp/>min_points2);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_DBSCAN2<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double,<sp/>std::milli&gt;<sp/>duration_DBSCAN2<sp/>=<sp/>end_DBSCAN2<sp/>-<sp/>start_DBSCAN2;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_INFO(logger,<sp/></highlight><highlight class="stringliteral">&quot;DBSCAN2<sp/>time:<sp/>%fms&quot;</highlight><highlight class="normal">,<sp/>duration_DBSCAN2.count());</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>the<sp/>overall<sp/>pipeline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_pipeline<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double,<sp/>std::milli&gt;<sp/>duration_pipeline<sp/>=<sp/>end_pipeline<sp/>-<sp/>start_pipeline;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_INFO(logger,<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>pipeline<sp/>time:<sp/>%fms&quot;</highlight><highlight class="normal">,<sp/>duration_pipeline.count());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filtered_cloud;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="/home/aryalohia/CMR/24a/driverless/driverless_ws/src/HesaiLidar_ROS_2.0/src/CMR_CPP_Pipeline.cpp"/>
  </compounddef>
</doxygen>
