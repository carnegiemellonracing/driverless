import numpy as np
import matplotlib.pyplot as plt

# Function to evaluate the spline at a given t (between 0 and 1)
def evaluate_spline(coeffs, t):
    # Compute the cubic polynomial at the given t
    return coeffs[0] * t**3 + coeffs[1] * t**2 + coeffs[2] * t + coeffs[3]

# Function to read the spline coefficients from the file
def read_splines(file_name):
    splines = []
    with open(file_name, 'r') as file:
        for line in file:
            # Read the coefficients for each chunk (16 coefficients per chunk)
            coeffs = list(map(float, line.split()))
            splines.append(coeffs)
    return splines

# Function to generate the raceline
def generate_raceline(splines, num_points=100):
    x_vals = []
    y_vals = []
    
    for spline in splines:
        # Split the coefficients into two parts (X and Y splines)
        X1, X2, Y1, Y2 = np.array(spline[:4]), np.array(spline[4:8]), np.array(spline[8:12]), np.array(spline[12:])
        
        # Interpolate along the X and Y splines with t ranging from 0 to 0.5
        for i in range(num_points):
            t = 0 + (i / (num_points - 1)) * 0.5  # Scale t to go from 0 to 0.5
            # X and Y values at this t
            x1 = evaluate_spline(X1, t)
            y1 = evaluate_spline(Y1, t)
            x2 = evaluate_spline(X2, t)
            y2 = evaluate_spline(Y2, t)
            x_vals.append(x1)
            y_vals.append(y1)
            x_vals.append(x2)
            y_vals.append(y2)

    return np.array(x_vals), np.array(y_vals)

def evaluate_polynomial(coeffs, t):
    """
    Evaluate a cubic polynomial given its coefficients and parameter t.
    coeffs: List of coefficients [a3, a2, a1, a0] for t^3, t^2, t, constant.
    t: Array of parameter values.
    """
    return coeffs[3] * t**3 + coeffs[2] * t**2 + coeffs[1] * t + coeffs[0]

def plot_parametric_cubic_polynomials(input_data_1, input_data_2, points, file_name = "splines.txt", num_points=100):
    """
    Plot a list of parametric cubic polynomials (x(t), y(t)).
    input_data: List of tuples. Each tuple contains:
                - A list of tuples representing grouped parametric splines (x(t), y(t)).
                - A tuple (start_t, end_t) specifying the range of t for the group.
    num_points: Number of points to evaluate for each polynomial.
    """
    plt.figure(figsize=(12, 8))
    colors = ['blue', 'red', 'green', 'purple', 'orange']
    
    # Process input_data = input_data_1 first, then input_data = input_data_2
    for input_data in [input_data_1, input_data_2]:
        # For a given chunk, process the splines and the t_range
        # splines is a list of tuples: x(t) and y(t) polynomials
        for group_index, (splines, t_range) in enumerate(input_data):
            print(f"\n chunk {group_index}")
            print(f"range {t_range}")
            
            # if (group_index == 1 or input_data != input_data_2):
            group_size = len(splines)
            start_t, end_t = t_range
            group_color = colors[group_index % 18 % len(colors)]
            
            for spline_index, (x_coeffs, y_coeffs) in enumerate(splines):
                # Determine t_range for this spline
                if spline_index == 0:
                    t_start, t_end = start_t, 1  # First spline gets group start_t
                elif spline_index == group_size - 1:
                    t_start, t_end = 0, end_t  # Last spline gets group end_t
                else:
                    t_start, t_end = 0, 1  # Intermediate splines default to [0, 1]
                
                t = np.linspace(t_start, t_end, num_points)
                
                # Evaluate x(t) and y(t)
                x_vals = evaluate_polynomial(x_coeffs, t)
                y_vals = evaluate_polynomial(y_coeffs, t)
                
                # Plot the parametric curve
                plt.plot(x_vals, y_vals, color=group_color, linewidth=2, label=f'Group {group_index + 1}' if spline_index == 0 else None)
    
    if points:
        x_points, y_points = zip(*points)
        plt.scatter(x_points, y_points, color='black', label='Points')
        for x, y in points:
            plt.text(x, y, f'({x}, {y})', fontsize=9, ha='right')

    # Read spline coefficients from file
    splines = read_splines(file_name)
    # Generate the raceline
    x_vals, y_vals = generate_raceline(splines, num_points)
    plt.scatter(x_vals, y_vals, marker='.', color='blue')

    plt.title("Parametric Cubic Polynomials")
    plt.xlabel("x(t)")
    plt.ylabel("y(t)")
    plt.grid(True)
    plt.legend()
    plt.show()

# Example Input Data
# points = [(-4, 11.9789),
#  (0, 13.7005),
#  (-4.07281, 22.5173),
#  (-2.98091, 27.1851),
#  (-4.58822, 23.4118),
#  (-4.32654, 27.6914),
#  (-10, 24),
#  (-11.9746, 28),
#  (-15.4118, 23.4118),
#  (-18.8613, 25.5097),
#  (-16.0066, 22.5328),
#  (-19.5661, 24.224),
#  (-15.3989, 20.996),
#  (-19.9902, 21.9157),
#  (-14.3374, 19.0358),
#  (-18.4422, 19.2838),
#  (-14.6985, 16.956),
#  (-19.0486, 16.4922),
#  (-16, 15),
#  (-20.7759, 13.7481),
#  (-17.3015, 13.0439),
#  (-21.6162, 10.8503),
#  (-17.6626, 10.9642),
#  (-20.0683, 8.18413),
#  (-16.5822, 9.01478),
#  (-20.0467, 5.12523),
#  (-16, 6.00578),
#  (-19.1328, 0.874076),
#  (-15.924, 3.4841),
#  (-17.1113, -1.93022),
#  (-15.4235, 2.45503),
#  (-15.5846, -2.19805),
#  (-10.509, 2),
#  (-8.51472, -2),
#  (-4.98541, 1.88822),
#  (-1.17248, -0.773572)]

input_data_2_old = [([
([0,2,-4,2],[0,2,0,0])
,
([0,0,0,0],[2,2,0,0])
],
 (0, 0.347731)
),
([
([0,0,0,0],[2,2,0,0])
,
([0,0,0,0],[4,2,0,0])
,
([0,0,0,0],[6,2,0,0])
,
([0,0,0,0],[8,2,0,0])
,
([0,0,0,0],[10,2,0,0])
,
([0,0,0,0],[12,2,0,0])
,
([0,0,0,0],[14,2,0,0])
,
([0,0,0,0],[16,2,0,0])
,
([0,0,0,0],[18,2,0,0])
,
([0,0,0.401924,-0.401924],[20,2,-0.5,0.5])
,
([0,-0.401924,-0.107695,-0.294229],[22,2.5,1.40192,-0.901924])
,
([-0.803848,-1.5,-0.990381,0.294229],[25,2.59808,-0.107695,-0.294229])
],
 (0.347731, 0.758963)
),
([
([-0.803848,-1.5,-0.990381,0.294229],[25,2.59808,-0.107695,-0.294229])
,
([-3,-2.59808,-1.30385,0.901924],[27.1962,1.5,-0.990381,0.294229])
],
 (0.758963, 0.223414)
),
([
([-3,-2.59808,-1.30385,0.901924],[27.1962,1.5,-0.990381,0.294229])
,
([-6,-2.5,1,-0.5],[28,0.401924,-0.803848,0.401924])
,
([-8,-2,0,0],[28,0,0,0])
,
([-10,-2,0,0],[28,0,0,0])
,
([-12,-2,0.5,-0.5],[28,0,0.401924,-0.401924])
,
([-14,-2.5,-1.40192,0.901924],[28,-0.401924,-0.107695,-0.294229])
,
([-17,-2.59808,0.107695,0.294229],[27.1962,-1.5,-0.990381,0.294229])
,
([-19.1962,-1.5,0.380781,0.315371],[25,-2.59808,-1.30385,0.901924])
],
 (0.223414, 0.0366999)
),
([
([-19.1962,-1.5,0.380781,0.315371],[25,-2.59808,-1.30385,0.901924])
],
 (0.0366999, 0.491832)
),
([
([-19.1962,-1.5,0.380781,0.315371],[25,-2.59808,-1.30385,0.901924])
,
([-20,0.207676,2.32785,-1.31632],[22,-2.5,1,-0.5])
],
 (0.491832, 0.706962)
),
([
([-20,0.207676,2.32785,-1.31632],[22,-2.5,1,-0.5])
,
([-18.7808,0.9144,0.3048,-0.6096],[20,-2,0,0])
,
([-18.1712,-0.3048,-1.8288,0.9144],[18,-2,0,0])
],
 (0.706962, 0.0652083)
),
([
([-18.1712,-0.3048,-1.8288,0.9144],[18,-2,0,0])
,
([-19.3904,-1.2192,0,0],[16,-2,0,0])
],
 (0.0652083, 0.43925)
),
([
([-19.3904,-1.2192,0,0],[16,-2,0,0])
,
([-20.6096,-1.2192,-0.9144,0.9144],[14,-2,0,0])
,
([-21.8288,-0.3048,1.524,-0.6096],[12,-2,0,0])
,
([-21.2192,0.9144,1.2192,-0.9144],[10,-2,0,0])
],
 (0.43925, 0.295686)
),
([
([-21.2192,0.9144,1.2192,-0.9144],[10,-2,0,0])
,
([-20,0.6096,-1.2192,0.6096],[8,-2,0,0])
],
 (0.295686, 0.628755)
),
([
([-20,0.6096,-1.2192,0.6096],[8,-2,0,0])
,
([-20,0,-0.401924,0.401924],[6,-2,0.5,-0.5])
,
([-20,0.401924,0.107695,0.294229],[4,-2.5,-1,0.5])
],
 (0.628755, 0.182268)
),
([
([-20,0.401924,0.107695,0.294229],[4,-2.5,-1,0.5])
,
([-19.1962,1.5,0.990381,-0.294229],[1,-3,-1.5,1.5])
],
 (0.182268, 0.043442)
),
([
([-19.1962,1.5,0.990381,-0.294229],[1,-3,-1.5,1.5])
],
 (0.043442, 0.746546)
),
([
([-19.1962,1.5,0.990381,-0.294229],[1,-3,-1.5,1.5])
,
([-17,2.59808,1.30385,-0.901924],[-2,-1.5,3,-1.5])
],
 (0.746546, 0.196346)
),
([
([-17,2.59808,1.30385,-0.901924],[-2,-1.5,3,-1.5])
,
([-14,2.5,-1,0.5],[-2,0,0,0])
,
([-12,2,0,0],[-2,0,0,0])
,
([-10,2,0,0],[-2,0,0,0])
,
([-8,2,0,0],[-2,0,0,0])
,
([-6,2,-1,1],[-2,0,-1,1])
,
([-4,3,4,-3],[-2,1,2,-1])
],
 (0.196346, 1)
)]

input_data = [([([-4,1,-2,1],[2,1,2,-1])],
 (0, 1)),
([([-4,0,0,0],[4,2,0,0]),([-4,0,0,0],[6,2,0,0]),([-4,0,0,0],[8,2,0,0]),([-4,0,0,0],[10,2,0,0]),([-4,0,0,0],[12,2,0,0]),([-4,0,0,0],[14,2,0,0]),([-4,0,0,0],[16,2,0,0]),([-4,0,0,0],[18,2,0,0]),([-4,0,0.133975,-0.133975],[20,2,0.5,-0.5])],
(0, 1)),([([-4,-0.133975,-0.0358984,-0.0980762],[22,1.5,-0.866025,0.366025])],
(0, 1)),([([-4.26795,-0.5,-0.330127,0.0980762],[23,0.866025,-0.0358984,-0.0980762]),([-5,-0.866025,0.232051,-0.366025],[23.7321,0.5,-0.330127,0.0980762]),([-6,-1.5,-1,0.5],[24,0.133975,-0.267949,0.133975]),([-8,-2,0,0],[24,0,0,0]),([-10,-2,0,0],[24,0,0,0]),([-12,-2,-0.5,0.5],[24,0,0.133975,-0.133975]),([-14,-1.5,0.866025,-0.366025],[24,-0.133975,-0.0358984,-0.0980762]),([-15,-0.866025,0.0358984,0.0980762],[23.7321,-0.5,-0.330127,0.0980762])],
(0, 1)),([([-15.7321,-0.5,-0.279473,0.511524],[23,-0.866025,0.232051,-0.366025])],
(0, 1)),([([-16,0.475625,1.79195,-1.04837],[22,-1.5,-1,0.5])],
(0, 1)),([([-14.7808,0.9144,0.3048,-0.6096],[20,-2,0,0])],
(0, 1)),([([-14.1712,-0.3048,-1.8288,0.9144],[18,-2,0,0])],
(0, 1)),([([-15.3904,-1.2192,0,0],[16,-2,0,0]),([-16.6096,-1.2192,-0.9144,0.9144],[14,-2,0,0])],
(0, 1)),([([-17.8288,-0.3048,1.524,-0.6096],[12,-2,0,0])],
(0, 1)),([([-17.2192,0.9144,1.2192,-0.9144],[10,-2,0,0])],
(0, 1)),([([-16,0.6096,-1.2192,0.6096],[8,-2,0,0])],
(0, 1)),([([-16,0,-0.133975,0.133975],[6,-2,-0.5,0.5])],
(0, 1)),([([-16,0.133975,0.0358984,0.0980762],[4,-1.5,1,-0.5])],
(0, 1)),([([-15.7321,0.5,0.330127,-0.0980762],[3,-1,-0.5,0.5]),([-15,0.866025,-0.232051,0.366025],[2,-0.5,1,-0.5]),([-14,1.5,1,-0.5],[2,0,0,0]),([-12,2,0,0],[2,0,0,0]),([-10,2,0,0],[2,0,0,0]),([-8,2,0,0],[2,0,0,0]),([-6,2,1,-1],[2,0,-1,1])],
 (0, 1))]

input_data_2 = [([([0,2,-4,2],[0,2,0,0]),([0,0,0,0],[2,2,0,0])],
 (0, 0.347731)),
([([0,0,0,0],[2,2,0,0]),([0,0,0,0],[4,2,0,0]),([0,0,0,0],[6,2,0,0]),([0,0,0,0],[8,2,0,0]),([0,0,0,0],[10,2,0,0]),([0,0,0,0],[12,2,0,0]),([0,0,0,0],[14,2,0,0]),([0,0,0,0],[16,2,0,0]),([0,0,0,0],[18,2,0,0]),([0,0,0.401924,-0.401924],[20,2,-0.5,0.5]),([0,-0.401924,-0.107695,-0.294229],[22,2.5,1.40192,-0.901924]),([-0.803848,-1.5,-0.990381,0.294229],[25,2.59808,-0.107695,-0.294229])],
 (0.347731, 0.763222)),
([([-0.803848,-1.5,-0.990381,0.294229],[25,2.59808,-0.107695,-0.294229]),([-3,-2.59808,-1.30385,0.901924],[27.1962,1.5,-0.990381,0.294229])],
 (0.763222, 0.22383)),
([([-3,-2.59808,-1.30385,0.901924],[27.1962,1.5,-0.990381,0.294229]),([-6,-2.5,1,-0.5],[28,0.401924,-0.803848,0.401924]),([-8,-2,0,0],[28,0,0,0]),([-10,-2,0,0],[28,0,0,0]),([-12,-2,0.5,-0.5],[28,0,0.401924,-0.401924]),([-14,-2.5,-1.40192,0.901924],[28,-0.401924,-0.107695,-0.294229]),([-17,-2.59808,0.107695,0.294229],[27.1962,-1.5,-0.990381,0.294229]),([-19.1962,-1.5,0.380781,0.315371],[25,-2.59808,-1.30385,0.901924])],
 (0.22383, 0.0354144)),
([([-19.1962,-1.5,0.380781,0.315371],[25,-2.59808,-1.30385,0.901924])],
 (0.0354144, 0.512011)),
([([-19.1962,-1.5,0.380781,0.315371],[25,-2.59808,-1.30385,0.901924]),([-20,0.207676,2.32785,-1.31632],[22,-2.5,1,-0.5])],
 (0.512011, 0.717189)),
([([-20,0.207676,2.32785,-1.31632],[22,-2.5,1,-0.5]),([-18.7808,0.9144,0.3048,-0.6096],[20,-2,0,0]),([-18.1712,-0.3048,-1.8288,0.9144],[18,-2,0,0])],
 (0.717189, 0.0564602)),
([([-18.1712,-0.3048,-1.8288,0.9144],[18,-2,0,0]),([-19.3904,-1.2192,0,0],[16,-2,0,0])],
 (0.0564602, 0.439245)),
([([-19.3904,-1.2192,0,0],[16,-2,0,0]),([-20.6096,-1.2192,-0.9144,0.9144],[14,-2,0,0]),([-21.8288,-0.3048,1.524,-0.6096],[12,-2,0,0]),([-21.2192,0.9144,1.2192,-0.9144],[10,-2,0,0])],
 (0.439245, 0.293485)),
([([-21.2192,0.9144,1.2192,-0.9144],[10,-2,0,0]),([-20,0.6096,-1.2192,0.6096],[8,-2,0,0])],
 (0.293485, 0.629914)),
([([-20,0.6096,-1.2192,0.6096],[8,-2,0,0]),([-20,0,-0.401924,0.401924],[6,-2,0.5,-0.5]),([-20,0.401924,0.107695,0.294229],[4,-2.5,-1,0.5])],
 (0.629914, 0.157814)),
([([-20,0.401924,0.107695,0.294229],[4,-2.5,-1,0.5]),([-19.1962,1.5,0.990381,-0.294229],[1,-3,-1.5,1.5])],
 (0.157814, 0.0396146)),
([([-19.1962,1.5,0.990381,-0.294229],[1,-3,-1.5,1.5])],
 (0.0396146, 0.773567)),
([([-19.1962,1.5,0.990381,-0.294229],[1,-3,-1.5,1.5]),([-17,2.59808,1.30385,-0.901924],[-2,-1.5,3,-1.5])],
 (0.773567, 0.192899)),
([([-17,2.59808,1.30385,-0.901924],[-2,-1.5,3,-1.5]),([-14,2.5,-1,0.5],[-2,0,0,0]),([-12,2,0,0],[-2,0,0,0]),([-10,2,0,0],[-2,0,0,0]),([-8,2,0,0],[-2,0,0,0]),([-6,2,-1,1],[-2,0,-1,1]),([-4,3,4,-3],[-2,1,2,-1])],
 (0.192899, 1))]

# input_data_2 = [
# ([
# ([-3,-2.59808,-1.30385,0.901924],[27.1962,1.5,-0.990381,0.294229])
# ],
#  (0.0255285, 0.0780983)
# )]

# Plot the parametric cubic polynomials
plot_parametric_cubic_polynomials(input_data, input_data_2_old, points)