#pragma once

#include <array>
// Note: these header files are part of the ROS2 standard libraries
#include <geometry_msgs/msg/twist_stamped.hpp>
#include <geometry_msgs/msg/quaternion_stamped.hpp>
#include <geometry_msgs/msg/pose_stamped.hpp>
// Note: these header files are generated by ROS2 from the .msg files in the interfaces package.
#include <interfaces/msg/spline_frames.hpp>
#include <interfaces/msg/control_action.hpp>
#include <interfaces/msg/controls_state.hpp>
#include <interfaces/msg/controller_info.hpp>
#include <interfaces/msg/cone_array.hpp>

#include "constants.hpp"

namespace controls {
    /// Control action: currently steering wheel angle and forward throttle
    using Action = std::array<float, action_dims>;
    /// Vehicle state: currently inertial x, y, yaw, speed
    using State = std::array<float, state_dims>;

    /// ROS Messages
    ///@TODO: why not use std_msgs/Header for our custom messages?
    ///@TODO: related: builtin_interfaces/Time vs Time stamp - should standardize right?
    using TwistMsg = geometry_msgs::msg::TwistStamped; ///< 3D linear velocity, 3D angular velocity, timestamp
    using QuatMsg = geometry_msgs::msg::QuaternionStamped; ///< @TODO: don't see this anywhere, delete (encompassed by Pose)?
    using PoseMsg = geometry_msgs::msg::PoseStamped; ///< 3D position, 3D orientation, timestamp
    using SplineMsg = interfaces::msg::SplineFrames; ///< Array of 3D splint points, timestamp
    using ActionMsg = interfaces::msg::ControlAction; ///< 4 wheel torques, steering angle, timestamp
    using StateMsg = interfaces::msg::ControlsState; ///< p=4 dimensional state: x, y, yaw, speed. Derived from twist and pose.
    using InfoMsg = interfaces::msg::ControllerInfo; ///< State, control action, latency info
    using ConeMsg = interfaces::msg::ConeArray; /// Array of coloured cone positions
    /// Logging function type.
    using LoggerFunc = std::function<void(const char*)>;
    /// Instance of LoggerFunc that doesn't log anything.
    constexpr void no_log(const char*) {};

}
