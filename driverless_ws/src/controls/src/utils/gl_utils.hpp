#pragma once

#include <stdexcept>
#include <glad/glad.h>
#include <SDL2/SDL.h>


namespace controls {
    namespace utils {
        /**
         * Stores the names of the vao, vbo, ebo. Once the names are generated by gen_gl_path(), they can be used
         * as identifiers for other OpenGL functions.
         */
        struct GLObj {
            GLuint vao; ///< Vertex Array Object. Specifies how the VBO is laid out, e.g. how big is a vertex.
            GLuint vbo; ///< Vertex Buffer Object. Contiguous block of memory where all the vertices' information is stored.
            GLuint ebo; ///< Element Buffer Object. Memory that contains triples of indices into the VBO, representing triangles.
        };

        /**
         * @brief Creates an SDL2 window with OpenGL context.
         * @param title The title of the window.
         * @param width The width of the window.
         * @param height The height of the window.
         * @param additional_flags Additional flags for the SDL window.
         * @param[out] gl_context Pointer to an SDL_GLContext to store the created context.
         * @return Pointer to the created SDL_Window.
         * @throws std::runtime_error if there is an error during window or context creation.
         */
        SDL_Window* create_sdl2_gl_window(const char *title, int width, int height, Uint32 additional_flags = 0, SDL_GLContext* gl_context = nullptr);
        /**
         * @brief Prints the log of a GLSL program.
         * @param program The OpenGL program ID.
         */
        void print_program_log(GLuint program);
        /**
         * @brief Prints the log of a GLSL shader.
         * @param shader The OpenGL shader ID.
         */
        void print_shader_log(GLuint shader);
        /**
         * @brief Callback function for OpenGL debug messages.
         * @param source The source of the debug message.
         * @param type The type of the debug message.
         * @param id The ID of the debug message.
         * @param severity The severity of the debug message.
         * @param length The length of the debug message.
         * @param message The debug message string.
         * @param userParam User-defined parameter.
         */
        void gl_debug_callback(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);
        /**
         * @brief JIT compiles the various shader codes together into a single shader program.
         * @param vertex_source vertex shader code.
         * @param fragment_source fragment shader code
         * @return the compound shader program ID to be used.
         * @throws std::runtime_error if there is an error during shader compilation or program linking.
         */
        GLuint compile_shader(const char* vertex_source, const char* fragment_source);
        /**
         * @brief Makes the OpenGL context current for the specified window or throws an exception.
         * @param window The SDL window.
         * @param gl_context The OpenGL context.
         * @throws std::runtime_error if there is an error making the context current.
         */
        void make_gl_current_or_except(SDL_Window* window, SDL_GLContext gl_context);
        /**
         * @brief Synchronizes with the OpenGL commands and unbinds the context from the current thread.
         * @param window The SDL window.
         */
        void sync_gl_and_unbind_context(SDL_Window* window);
    }
}