#pragma once

#include <stdexcept>
#include <glad/glad.h>
#include <SDL2/SDL.h>


namespace controls {
    namespace utils {
        /**
         * Stores the names of the vao, vbo, ebo. Once the names are generated by gen_gl_path(), they can be used
         * as identifiers for other OpenGL functions
         */
        struct GLObj {
            GLuint vao;
            GLuint vbo;
            GLuint ebo;
        };

        SDL_Window* create_sdl2_gl_window(const char *title, int width, int height, Uint32 additional_flags = 0, SDL_GLContext* gl_context = nullptr);
        void print_program_log(GLuint program);
        void print_shader_log(GLuint shader);
        void gl_debug_callback(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);
        /**
         * @brief JIT compiles the various shader codes together into a single shader program.
         * @param vertex_source vertex shader code.
         * @param fragment_source fragment shader code
         * @return the compound shader program to be used.
         */
        GLuint compile_shader(const char* vertex_source, const char* fragment_source);
        /**
         * @brief Enable OpenGL
         * @param window
         * @param gl_context
         */
        void make_gl_current_or_except(SDL_Window* window, SDL_GLContext gl_context);
        void sync_gl_and_unbind_context(SDL_Window* window);
    }
}