//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: minimal_state_function.cpp
//
// MATLAB Coder version            : 5.5
// C/C++ source code generated on  : 05-Sep-2023 12:02:37
//

// Include Files
#include "minimal_state_function.h"
#include "rt_nonfinite.h"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = rtNaN;
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = rtNaN;
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

//
// MINIMAL_STATE_FUNCTION
//     OUT1 = MINIMAL_STATE_FUNCTION(IN1,IN2)
//
// Arguments    : const double in1[10]
//                const double in2[5]
//                double out1[10]
// Return Type  : void
//
void minimal_state_function(const double in1[10], const double in2[5],
                            double out1[10])
{
  double a;
  double a_tmp;
  double a_tmp_tmp;
  double b_a;
  double b_a_tmp;
  double c_a_tmp;
  double t106;
  double t109;
  double t112;
  double t114;
  double t116;
  double t118;
  double t118_tmp;
  double t127;
  double t128;
  double t129;
  double t130;
  double t132;
  double t134;
  double t14;
  double t15;
  double t153;
  double t159;
  double t166;
  double t168;
  double t17;
  double t171;
  double t178;
  double t18;
  double t2;
  double t20;
  double t243;
  double t245;
  double t247;
  double t248;
  double t26;
  double t27;
  double t275;
  double t28;
  double t29;
  double t293_tmp;
  double t295;
  double t297;
  double t3;
  double t30;
  double t311;
  double t317;
  double t319;
  double t329;
  double t33;
  double t331;
  double t334;
  double t335;
  double t336;
  double t339;
  double t342;
  double t345;
  double t351;
  double t357;
  double t36;
  double t38;
  double t383;
  double t383_tmp;
  double t400;
  double t417;
  double t424;
  double t424_tmp;
  double t429;
  double t429_tmp;
  double t44;
  double t440_tmp;
  double t46;
  double t47;
  double t48;
  double t53;
  double t56;
  double t57;
  double t58;
  double t6;
  double t64;
  double t65;
  double t67;
  double t69;
  double t7;
  double t73;
  double t74;
  double t78;
  double t80;
  double t82;
  double t83;
  double t84;
  double t85;
  double t86;
  double t87;
  double t9;
  double t91;
  double t92;
  double t93;
  //     This function was generated by the Symbolic Math Toolbox version 9.2.
  //     05-Sep-2023 11:45:15
  t2 = std::cos(in2[0]);
  t3 = std::sin(in2[0]);
  t6 = in1[5] / 4.0;
  t7 = in1[5] * 125.0;
  t9 = in1[5] / 8.0;
  t14 = in1[3] * 1.5384615384615385;
  t15 = in1[4] * 0.32258064516129031;
  t17 = in1[2] * 0.65;
  t18 = in1[2] * 0.775;
  t20 = in1[5] * 0.16447368421052633;
  t26 = in1[5] * 5853.75;
  t27 = in1[3] * 1.0121457489878543;
  t28 = in1[4] * 161.29032258064521;
  t33 = in1[5] * 0.1050526315789474;
  t36 = in1[4] * 0.21222410865874364;
  t38 = in1[3] * 769.23076923076917;
  t44 = in1[3] * 0.35514170040485832;
  t46 = in1[3] * 0.64647773279352228;
  t47 = in1[4] * 7553.2258064516127;
  t48 = in1[3] * 36023.076923076922;
  t53 = in1[5] * 0.057710526315789469;
  t56 = in1[4] * 0.13555178268251269;
  t57 = in1[3] * 0.1703238866396761;
  t58 = in1[4] * 0.074465195246179963;
  t69 = in1[5] * 0.02767763157894737;
  t73 = in1[3] * 0.622085020242915;
  t74 = in1[4] * 0.035713073005093382;
  t78 = in1[5] * 0.10108881578947369;
  t80 = in1[3] * 0.22814777327935221;
  t82 = in1[3] * 0.319504048582996;
  t83 = in1[3] * 0.60701417004048575;
  t84 = in1[4] * 0.130437181663837;
  t85 = in1[4] * 0.0478374363327674;
  t86 = in1[4] * 0.0669927843803056;
  t87 = in1[4] * 0.1272771646859083;
  t91 = in1[5] * 0.037074013157894742;
  t92 = in1[5] * 0.051919407894736841;
  t93 = in1[5] * 0.098639802631578954;
  t168 = in1[5] * 6.4804276315789475E-5;
  t171 = in1[3] * 0.0003987955465587044;
  t178 = in1[4] * 8.3618421052631574E-5;
  t29 = t17 + in1[0];
  t30 = t18 + in1[1];
  t109 = (-in1[0] + t17) + in1[9] * 0.2286;
  t64 = t2 * t29;
  t65 = t2 * t30;
  t67 = t3 * t30;
  t106 = t29 - in1[8] * 0.2286;
  t30 = t6 + t14;
  t128 = std::abs((t30 + t15) - 0.06867);
  t114 = t64 + t67;
  t118_tmp = t17 - in1[0];
  t118 = t67 + -t2 * t118_tmp;
  t127 = std::abs(((-t6 + t14) + t15) + 0.06867);
  t129 = std::abs(((t6 + t15) - t14) - 0.06867);
  t130 = std::abs((t30 - t15) - 0.06867);
  a_tmp_tmp = t2 * t118_tmp;
  a_tmp = (in1[7] * 0.2286 - t67) + a_tmp_tmp;
  t112 = 1.0 / (std::abs(t29) + 1.192092895507812E-7);
  t134 = -(in1[6] * 0.2286) + t114;
  t153 = t129 * 0.65789473684210531;
  t15 = t130 * 0.65789473684210531;
  t116 = 1.0 / (std::abs(-t17 + in1[0]) + 1.192092895507812E-7);
  t30 = -t7 + t28;
  t243 = ((t30 + t38) + t127 * 500.0) + 34.335;
  t245 = (((t7 + t28) + t38) - t128 * 500.0) - 34.335;
  t247 = ((t30 - t38) + t130 * 500.0) + 34.335;
  t248 = (((-t7 - t28) + t38) + t129 * 500.0) + 34.335;
  t30 = t20 + t27;
  b_a_tmp = (t30 + t36) - t128 * 0.65789473684210531;
  t14 = -t20 + t27;
  c_a_tmp = (t14 + t36) + t127 * 0.65789473684210531;
  t7 = -t26 + t47;
  t275 = ((t7 - t48) + t130 * 23415.0) + 1607.90805;
  t293_tmp = t44 + t53;
  t295 = (((t44 + t58) - t53) + t127 * 0.2308421052631579) - 3.0207280726315791;
  t17 = t83 + t87;
  t311 = ((t17 - t93) + t127 * 0.39455921052631582) - 3.300935619013158;
  t6 = t18 - in1[1];
  t132 = std::atan(-t112 * t6);
  t159 = 1.0 / (std::abs(t114) + 1.192092895507812E-7);
  t166 = 1.0 / (std::abs(t118) + 1.192092895507812E-7);
  a = (((t20 - t27) + t36) - t153) + 0.95482236842105261;
  b_a = ((t30 - t36) - t15) + 0.95482236842105261;
  t297 = ((t293_tmp - t58) - t130 * 0.2308421052631579) + 3.0207280726315791;
  t319 = (((t83 + t93) - t87) - t130 * 0.39455921052631582) + 3.300935619013158;
  t38 = std::atan(-t116 * t6);
  t317 = std::exp((((t80 + t91) - t85) - t130 * 0.14829605263157891) +
                  0.21522651006578949);
  t18 = std::atan((t65 - t3 * t29) * t159);
  t28 = std::atan((t65 + t3 * t118_tmp) * t166);
  t329 = std::sin(
      std::atan(-1.0693122373788908 * (c_a_tmp + 0.045177631578947372)) *
      0.031897);
  t331 = std::sin(
      std::atan(-1.0693122373788908 * (b_a_tmp - 0.045177631578947372)) *
      0.031897);
  t334 =
      std::sin(std::atan(-1.0693122373788908 * ((((-t20 - t27) + t36) + t15) +
                                                0.045177631578947372)) *
               0.031897);
  t335 = std::sin(std::atan(-1.0693122373788908 *
                            (((t14 - t36) + t153) + 0.045177631578947372)) *
                  0.031897);
  t336 = t132 * 14.517362910892555 *
         (1.0 / std::sqrt(t106 * t106 * (t112 * t112) * 118.10907684 + 1.0));
  t383_tmp = -0.97936156057461088 * t247 * t319;
  t383 = 1.0 / (t383_tmp * 1.5 - 2.2204460492503131E-16);
  t400 =
      1.0 / (-0.98579073977309384 * t247 * t297 * 1.5 - 2.2204460492503131E-16);
  t6 = t109 * t116;
  t424_tmp = -0.97936156057461088 * t245 *
             (((t17 + t93) - t128 * 0.39455921052631582) + 3.300935619013158);
  t424 = t6 * ((((t26 + t47) + t48) - t128 * 23415.0) - 1607.90805) *
         std::exp((((t80 + t85) + t91) - t128 * 0.14829605263157891) +
                  0.21522651006578949) *
         (1.0 / (t424_tmp * 1.5 + 2.2204460492503131E-16));
  t14 = t134 * t159;
  t440_tmp = -0.97936156057461088 * t243 * t311;
  t15 = t14 * (((t7 + t48) + t127 * 23415.0) + 1607.90805) *
        std::exp((((t91 - t80) - t85) - t127 * 0.14829605263157891) +
                 0.21522651006578949) *
        (1.0 / (t440_tmp * 1.5 + 2.2204460492503131E-16));
  t339 = t38 * 14.517362910892555 *
         (1.0 / std::sqrt(t109 * t109 * (t116 * t116) * 118.10907684 + 1.0));
  t351 = -0.94994365187960284 * t329 * 1.07463658E+6;
  t109 = -0.94994365187960284 * t331 * 1.07463658E+6;
  t17 = -0.94994365187960284 * t334 * 1.07463658E+6;
  t357 = -0.94994365187960284 * t335 * 1.07463658E+6;
  t30 = t106 * t112;
  t429_tmp =
      -0.97936156057461088 * t248 *
      ((((t87 + t93) - t83) - t129 * 0.39455921052631582) + 3.300935619013158);
  t429 = t30 * ((((-t26 + t48) - t47) + t129 * 23415.0) + 1607.90805) *
         std::exp((((t85 + t91) - t80) - t129 * 0.14829605263157891) +
                  0.21522651006578949) *
         (1.0 / (t429_tmp * 1.5 - 2.2204460492503131E-16));
  t27 = t166 * t275 * t317 * t383 * a_tmp;
  t342 = t30 * (1.0 / std::sqrt(t132 * t132 * 59.876644 + 1.0)) *
         -22.536539549548625;
  t153 = 14.517362910892555 * t18 *
         (1.0 / std::sqrt(t134 * t134 * (t159 * t159) * 118.10907684 + 1.0));
  t65 = 14.517362910892555 * t28 *
        (1.0 / std::sqrt(a_tmp * a_tmp * (t166 * t166) * 118.10907684 + 1.0));
  t36 = 1.0 / std::sqrt(t28 * t28 * 59.876644 + 1.0);
  t345 =
      t6 * (1.0 / std::sqrt(t38 * t38 * 59.876644 + 1.0)) * -22.536539549548625;
  t6 = t14 * -22.536539549548625 *
       (1.0 / std::sqrt(t18 * t18 * 59.876644 + 1.0));
  t20 = -t166 * -22.536539549548625 * t36 * a_tmp;
  t80 = t28 + 0.034899496702500969 * t247 *
                  ((((-t33 - t46) + t56) + t130 * 0.42021052631578948) +
                   3.6311358568421048) *
                  (1.0 / (t17 - 2.2204460492503131E-16));
  t417 = t38 - 0.034899496702500969 * t245 *
                   ((((t33 + t46) + t56) - t128 * 0.42021052631578948) -
                    3.6311358568421048) *
                   (1.0 / (t109 + 2.2204460492503131E-16));
  t30 = -t33 + t46;
  t91 = t132 -
        0.034899496702500969 * t248 *
            (((t30 - t56) + t129 * 0.42021052631578948) + 3.6311358568421048) *
            (1.0 / (t357 - 2.2204460492503131E-16));
  t28 = t18 -
        0.034899496702500969 * t243 *
            (((t30 + t56) + t127 * 0.42021052631578948) + 3.6311358568421048) *
            (1.0 / (t351 - 2.2204460492503131E-16));
  t38 = t73 + t78;
  t18 = t82 + t86;
  t132 = std::sin(
      std::atan(-t15 + (t15 - std::atan(t15)) *
                           ((((t18 - t92) + t127 * 0.20767763157894739) -
                             (c_a_tmp - 0.95482236842105261) *
                                 (c_a_tmp - 0.95482236842105261) * 1.4549) -
                            0.30140877703947372)) *
      1.5);
  c_a_tmp = in1[4] * 0.16129032258064516;
  t33 = in1[3] * 0.76923076923076927;
  t46 = in1[0] * 6.3E-5;
  t56 = in1[2] * 4.095E-5;
  t85 = t67 * 6.3E-5;
  t7 =
      1.0 / (-0.98579073977309384 * t243 * t295 * 1.5 + 2.2204460492503131E-16);
  t47 = -0.98579073977309384 * t245 *
        (((t293_tmp + t58) - t128 * 0.2308421052631579) + 3.0207280726315791);
  t48 = 1.0 / (t47 * 1.5 + 2.2204460492503131E-16);
  t87 =
      -0.98579073977309384 * t248 *
      ((((t53 - t44) + t58) - t129 * 0.2308421052631579) + 3.0207280726315791);
  t93 = 1.0 / (t87 * 1.5 - 2.2204460492503131E-16);
  t15 = t17 * t400 * t80;
  t17 = t109 * t48 * t417;
  t134 = t357 * t93 * t91;
  t30 = -0.94994365187960284 * t329 * t7 * t28 * -1.07463658E+6;
  t26 = std::cos(
      std::atan(t153 + -((((t73 + t84) - t78) + t127 * 0.40435526315789472) -
                         0.29504292407894739) *
                           (t153 - std::atan(t153))) *
      1.0297);
  t83 = std::cos(std::atan(-t65 + -(((t38 - t84) - t130 * 0.40435526315789472) +
                                    0.29504292407894739) *
                                      (t65 - std::atan(t65))) *
                 1.0297);
  t106 = std::sin(
      std::atan(t27 +
                (((((t82 + t92) - t86) - t130 * 0.20767763157894739) +
                  b_a * b_a * 1.4549) +
                 0.30140877703947372) *
                    (std::atan(-t166 * t275 * t317 * t383 * a_tmp) + t27)) *
      1.5);
  t14 = t57 + t69;
  t109 = std::cos(
      std::atan(-t6 + -((((t57 + t74) - t69) + t127 * 0.1107105263157895) -
                        0.68337750815789466) *
                          (t6 - std::atan(t6))) *
      0.9127);
  t36 =
      std::cos(std::atan(t20 + (((t14 - t74) - t130 * 0.1107105263157895) +
                                0.68337750815789466) *
                                   (std::atan(t20) +
                                    t166 * -22.536539549548625 * t36 * a_tmp)) *
               0.9127);
  t6 = t168 + t171;
  if (std::isnan(t80)) {
    t44 = rtNaN;
  } else if (t80 < 0.0) {
    t44 = -1.0;
  } else {
    t44 = (t80 > 0.0);
  }
  t27 = std::sin(std::atan(t15 + (((t6 - t178) - t130 * 0.0002592171052631579) +
                                  0.00075948956138157894) *
                                     ((0.034899496702500969 * t44 * 1658.3522 +
                                       336.75424896434578) +
                                      1.0) *
                                     (-0.94994365187960284 * t334 * t400 * t80 *
                                          -1.07463658E+6 +
                                      std::atan(t15))) *
                 1.5);
  if (std::isnan(t28)) {
    t44 = rtNaN;
  } else if (t28 < 0.0) {
    t44 = -1.0;
  } else {
    t44 = (t28 > 0.0);
  }
  t30 = std::sin(
      std::atan(t30 + ((((t171 - t168) + t178) + t127 * 0.0002592171052631579) -
                       0.00075948956138157894) *
                          ((336.75424896434578 -
                            0.034899496702500969 * t44 * 1658.3522) +
                           1.0) *
                          (t30 + std::atan(t351 * t7 * t28))) *
      1.5);
  t20 =
      t424_tmp *
      std::cos(std::atan(-t339 + -(((t38 + t84) - t128 * 0.40435526315789472) +
                                   0.29504292407894739) *
                                     (t339 - std::atan(t339))) *
               1.0297) *
      std::sin(
          std::atan(-t424 + -((((t18 + t92) - t128 * 0.20767763157894739) +
                               (b_a_tmp + 0.95482236842105261) *
                                   (b_a_tmp + 0.95482236842105261) * 1.4549) +
                              0.30140877703947372) *
                                (t424 - std::atan(t424))) *
          1.5);
  t28 =
      t429_tmp *
      std::cos(std::atan(-t336 +
                         -((((t78 - t73) + t84) - t129 * 0.40435526315789472) +
                           0.29504292407894739) *
                             (t336 - std::atan(t336))) *
               1.0297) *
      std::sin(std::atan(-t429 +
                         -(((((t86 + t92) - t82) - t129 * 0.20767763157894739) +
                            a * a * 1.4549) +
                           0.30140877703947372) *
                             (t429 - std::atan(t429))) *
               1.5);
  t38 = t2 * -0.97936156057461088 * t243 * t311 * t26 * t132;
  t18 = t2 * -0.97936156057461088 * t247 * t319 * t83 * t106;
  t153 = -0.98579073977309384 * t3 * t243 * t295 * t109 * t30;
  t65 = -0.98579073977309384 * t3 * t247 * t297 * t36;
  out1[0] = (((((in1[1] * in1[2] + t20 / 620.0) + t28 / 620.0) + t38 / 620.0) +
              t18 / 620.0) -
             t153 / 620.0) +
            t65 * t27 / 620.0;
  if (std::isnan(t417)) {
    t44 = rtNaN;
  } else if (t417 < 0.0) {
    t44 = -1.0;
  } else {
    t44 = (t417 > 0.0);
  }
  t7 = t47 *
       std::cos(std::atan(t345 + -(((t14 + t74) - t128 * 0.1107105263157895) +
                                   0.68337750815789466) *
                                     (t345 - std::atan(t345))) *
                0.9127) *
       std::sin(std::atan(t17 + (((t6 + t178) - t128 * 0.0002592171052631579) +
                                 0.00075948956138157894) *
                                    ((0.034899496702500969 * t44 * 1658.3522 +
                                      336.75424896434578) +
                                     1.0) *
                                    (-0.94994365187960284 * t331 * t48 * t417 *
                                         -1.07463658E+6 +
                                     std::atan(t17))) *
                1.5);
  if (std::isnan(t91)) {
    t44 = rtNaN;
  } else if (t91 < 0.0) {
    t44 = -1.0;
  } else {
    t44 = (t91 > 0.0);
  }
  t17 = t87 *
        std::cos(std::atan(t342 +
                           -((((t69 - t57) + t74) - t129 * 0.1107105263157895) +
                             0.68337750815789466) *
                               (t342 - std::atan(t342))) *
                 0.9127) *
        std::sin(
            std::atan(
                t134 +
                ((((t168 - t171) + t178) - t129 * 0.0002592171052631579) +
                 0.00075948956138157894) *
                    ((336.75424896434578 -
                      0.034899496702500969 * t44 * 1658.3522) +
                     1.0) *
                    (-0.94994365187960284 * t335 * t93 * t91 * -1.07463658E+6 +
                     std::atan(t134))) *
            1.5);
  t15 = t3 * -0.97936156057461088 * t243 * t311 * t26 * t132;
  t14 = t3 * -0.97936156057461088 * t247 * t319 * t83 * t106;
  t6 = t2 * -0.98579073977309384 * t243 * t295 * t109 * t30;
  t30 = t2 * -0.98579073977309384 * t247 * t297 * t36;
  out1[1] = (((((-in1[0] * in1[2] + t7 / 620.0) - t17 / 620.0) + t15 / 620.0) +
              t14 / 620.0) +
             t6 / 620.0) -
            t30 * t27 / 620.0;
  out1[2] =
      ((((((((((t20 * -0.0030741581536133178 + t28 * 0.0030741581536133178) -
               t7 * 0.0036653424139235719) +
              t17 * 0.0036653424139235719) +
             t38 * 0.0030741581536133178) +
            t15 * 0.0036653424139235719) -
           t18 * 0.0030741581536133178) +
          t14 * 0.0036653424139235719) +
         t6 * 0.0036653424139235719) -
        t153 * 0.0030741581536133178) -
       t30 * t27 * 0.0036653424139235719) -
      t65 * t27 * 0.0030741581536133178;
  out1[3] = 3.1415926535897931 *
            ((((((-in1[3] + t7 * 3.57E-5) - t17 * 3.57E-5) + t15 * 3.57E-5) +
               t14 * 3.57E-5) +
              t6 * 3.57E-5) -
             t30 * t27 * 3.57E-5) *
            20.0;
  out1[4] = 3.1415926535897931 *
            ((((((in1[4] + t20 * 3.57E-5) + t28 * 3.57E-5) + t38 * 3.57E-5) +
               t18 * 3.57E-5) -
              t153 * 3.57E-5) +
             t65 * t27 * 3.57E-5) *
            -20.0;
  out1[5] = 3.1415926535897931 * (in1[5] + 3.0411) * -20.0;
  t7 = c_a_tmp - t9;
  out1[6] = (in2[1] * 2277.9043280182232 +
             (((t64 * 6.3E-5 + t85) + t114 * t159 * 0.009) +
              rt_powd_snf(t114, 5.0) * t159 * 1.08E-11) *
                 (((t7 + t33) + t127 / 2.0) + 0.034335) * -520.7289293849658) +
            t440_tmp * t26 * t132 * -0.26036446469248292;
  out1[7] = (in2[2] * 2277.9043280182232 +
             (((t85 + t118 * t166 * 0.009) - a_tmp_tmp * 6.3E-5) +
              rt_powd_snf(t118, 5.0) * t166 * 1.08E-11) *
                 (((t7 - t33) + t130 / 2.0) + 0.034335) * -520.7289293849658) +
            t383_tmp * t83 * t106 * -0.26036446469248292;
  out1[8] = (in2[3] * 2277.9043280182232 -
             (((t46 + t56) + t112 * t29 * 0.009) +
              rt_powd_snf(t29, 5.0) * t112 * 1.08E-11) *
                 ((((-c_a_tmp - t9) + t33) + t129 / 2.0) + 0.034335) *
                 520.7289293849658) +
            t28 * -0.26036446469248292;
  out1[9] = (in2[4] * 2277.9043280182232 -
             (((-t46 + t56) + t116 * t118_tmp * 0.009) +
              t116 * rt_powd_snf(t118_tmp, 5.0) * 1.08E-11) *
                 ((((c_a_tmp + t9) + t33) - t128 / 2.0) - 0.034335) *
                 520.7289293849658) +
            t20 * -0.26036446469248292;
}

//
// File trailer for minimal_state_function.cpp
//
// [EOF]
//
