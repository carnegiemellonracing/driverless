<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="namespacecone__utils" kind="namespace" language="C++">
    <compoundname>cone_utils</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacecone__utils_1a9bc76bdcb0522d5218d1d5a03d7127af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd cone_utils::calc_cone_range_from_car</definition>
        <argsstring>(const std::vector&lt; gtsam::Point2 &gt; &amp;cone_obs)</argsstring>
        <name>calc_cone_range_from_car</name>
        <qualifiedname>cone_utils::calc_cone_range_from_car</qualifiedname>
        <param>
          <type>const std::vector&lt; gtsam::Point2 &gt; &amp;</type>
          <declname>cone_obs</declname>
        </param>
        <briefdescription>
<para>Calculates the Euclidean range from the car to each cone. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cone_obs</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of cone positions relative to the car. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::MatrixXd Vector of ranges for each cone. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/ros_utils.cpp" line="383" column="21" bodyfile="src/utils/ros_utils.cpp" bodystart="383" bodyend="392" declfile="include/ros_utils.hpp" declline="136" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacecone__utils_1a02dc4c44ca6f8140811d5de556f19cf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd cone_utils::calc_cone_bearing_from_car</definition>
        <argsstring>(const std::vector&lt; gtsam::Point2 &gt; &amp;cone_obs)</argsstring>
        <name>calc_cone_bearing_from_car</name>
        <qualifiedname>cone_utils::calc_cone_bearing_from_car</qualifiedname>
        <param>
          <type>const std::vector&lt; gtsam::Point2 &gt; &amp;</type>
          <declname>cone_obs</declname>
        </param>
        <briefdescription>
<para>Calculates the bearing angle from the car to each cone in radians. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cone_obs</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of cone positions relative to the car. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::MatrixXd Vector of bearings for each cone. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Intuition: Perceptions gives us cones in DV axes: y forwards and x right</para>
<para>Directly in front of us, the bearing is 0<itemizedlist>
<listitem><para>The bearing is the angle from the axis directly in front of us</para>
</listitem><listitem><para>counter clockwise is positive bearing</para>
</listitem><listitem><para>clockwise is negative bearing</para>
</listitem></itemizedlist>
</para>
<para>Given the DV axes, to calculate the bearing is atan2(-x, y)<itemizedlist>
<listitem><para>If the bearing was to the left (counter clockwise from 0)</para>
</listitem><listitem><para>The bearing would be a positive angle</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="src/utils/ros_utils.cpp" line="401" column="21" bodyfile="src/utils/ros_utils.cpp" bodystart="401" bodyend="423" declfile="include/ros_utils.hpp" declline="137" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacecone__utils_1a2ce07ff1b21a72732a23f0bc6ac20be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; gtsam::Point2 &gt;</type>
        <definition>std::vector&lt; gtsam::Point2 &gt; cone_utils::remove_far_cones</definition>
        <argsstring>(std::vector&lt; gtsam::Point2 &gt; cone_obs, double threshold)</argsstring>
        <name>remove_far_cones</name>
        <qualifiedname>cone_utils::remove_far_cones</qualifiedname>
        <param>
          <type>std::vector&lt; gtsam::Point2 &gt;</type>
          <declname>cone_obs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>Removes far away observed cones. </para>
        </briefdescription>
        <detaileddescription>
<para>Observed cones that are far away are more erroneous</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cone_obs</parametername>
</parameternamelist>
<parameterdescription>
<para>The observed cones </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The threshold distance from the car </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/ros_utils.cpp" line="431" column="17" bodyfile="src/utils/ros_utils.cpp" bodystart="431" bodyend="442" declfile="include/ros_utils.hpp" declline="145" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecone__utils_1a07cae07d0c1ed2294ea8e0ff72b69028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; gtsam::Point2 &gt;</type>
        <definition>std::vector&lt; gtsam::Point2 &gt; cone_utils::local_to_global_frame</definition>
        <argsstring>(std::vector&lt; gtsam::Point2 &gt; cone_obs, gtsam::Pose2 cur_pose)</argsstring>
        <name>local_to_global_frame</name>
        <qualifiedname>cone_utils::local_to_global_frame</qualifiedname>
        <param>
          <type>std::vector&lt; gtsam::Point2 &gt;</type>
          <declname>cone_obs</declname>
        </param>
        <param>
          <type>gtsam::Pose2</type>
          <declname>cur_pose</declname>
        </param>
        <briefdescription>
<para>Converts local cone coordinates to the global frame, accounting for LIDAR offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cone_obs</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of local cone points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cur_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>Current vehicle pose. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;gtsam::Point2&gt; Vector of cone points in global frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/ros_utils.cpp" line="496" column="17" bodyfile="src/utils/ros_utils.cpp" bodystart="496" bodyend="516" declfile="include/ros_utils.hpp" declline="147" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecone__utils_1a4a852a4280f355e50814747476ddf3ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; gtsam::Point2 &gt;</type>
        <definition>std::vector&lt; gtsam::Point2 &gt; cone_utils::global_to_local_frame</definition>
        <argsstring>(std::vector&lt; gtsam::Point2 &gt; cone_obs, gtsam::Pose2 cur_pose)</argsstring>
        <name>global_to_local_frame</name>
        <qualifiedname>cone_utils::global_to_local_frame</qualifiedname>
        <param>
          <type>std::vector&lt; gtsam::Point2 &gt;</type>
          <declname>cone_obs</declname>
        </param>
        <param>
          <type>gtsam::Pose2</type>
          <declname>cur_pose</declname>
        </param>
        <briefdescription>
<para>Converts global cone coordinates to the local car frame. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cone_obs</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of global cone points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cur_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>Current vehicle pose. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;gtsam::Point2&gt; Vector of cone points in local frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/ros_utils.cpp" line="466" column="17" bodyfile="src/utils/ros_utils.cpp" bodystart="466" bodyend="487" declfile="include/ros_utils.hpp" declline="148" declcolumn="17"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Functions for cone observations and coordinate frame transformations between local vehicle and global frames. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/ros_utils.hpp" line="135" column="1"/>
  </compounddef>
</doxygen>
