<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="isam2_8cpp" kind="file" language="C++">
    <compoundname>isam2.cpp</compoundname>
    <includes refid="isam2_8hpp" local="yes">isam2.hpp</includes>
    <incdepgraph>
      <node id="46">
        <label>constants.hpp</label>
        <link refid="constants_8hpp"/>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>data_association.hpp</label>
        <link refid="data__association_8hpp"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>isam2.hpp</label>
        <link refid="isam2_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>loop_closure.hpp</label>
        <link refid="loop__closure_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ros_utils.hpp</label>
        <link refid="ros__utils_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>slam_est_and_mcov.hpp</label>
        <link refid="slam__est__and__mcov_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>unary_factor.hpp</label>
        <link refid="unary__factor_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/isam2/isam2.cpp</label>
        <link refid="isam2_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="38">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="43">
        <label>chrono</label>
      </node>
      <node id="44">
        <label>climits</label>
      </node>
      <node id="42">
        <label>cmath</label>
      </node>
      <node id="41">
        <label>deque</label>
      </node>
      <node id="6">
        <label>eigen3/Eigen/Dense</label>
      </node>
      <node id="51">
        <label>float.h</label>
      </node>
      <node id="45">
        <label>fmt/format.h</label>
      </node>
      <node id="40">
        <label>fstream</label>
      </node>
      <node id="35">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="29">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="31">
        <label>geometry_msgs/msg/quaternion_stamped.hpp</label>
      </node>
      <node id="34">
        <label>geometry_msgs/msg/twist.hpp</label>
      </node>
      <node id="32">
        <label>geometry_msgs/msg/twist_stamped.hpp</label>
      </node>
      <node id="33">
        <label>geometry_msgs/msg/twist_with_covariance.hpp</label>
      </node>
      <node id="30">
        <label>geometry_msgs/msg/vector3_stamped.hpp</label>
      </node>
      <node id="4">
        <label>gtsam/geometry/Point2.h</label>
      </node>
      <node id="5">
        <label>gtsam/geometry/Pose2.h</label>
      </node>
      <node id="7">
        <label>gtsam/inference/Symbol.h</label>
      </node>
      <node id="12">
        <label>gtsam/nonlinear/DoglegOptimizer.h</label>
      </node>
      <node id="13">
        <label>gtsam/nonlinear/GaussNewtonOptimizer.h</label>
      </node>
      <node id="8">
        <label>gtsam/nonlinear/ISAM2.h</label>
      </node>
      <node id="11">
        <label>gtsam/nonlinear/LevenbergMarquardtOptimizer.h</label>
      </node>
      <node id="14">
        <label>gtsam/nonlinear/NonlinearConjugateGradientOptimizer.h</label>
      </node>
      <node id="54">
        <label>gtsam/nonlinear/NonlinearFactor.h</label>
      </node>
      <node id="9">
        <label>gtsam/nonlinear/NonlinearFactorGraph.h</label>
      </node>
      <node id="10">
        <label>gtsam/nonlinear/Values.h</label>
      </node>
      <node id="17">
        <label>gtsam/sam/BearingRangeFactor.h</label>
      </node>
      <node id="16">
        <label>gtsam/slam/BetweenFactor.h</label>
      </node>
      <node id="15">
        <label>gtsam/slam/ProjectionFactor.h</label>
      </node>
      <node id="25">
        <label>interfaces/msg/cone_array.hpp</label>
      </node>
      <node id="26">
        <label>interfaces/msg/cone_array_with_odom.hpp</label>
      </node>
      <node id="28">
        <label>interfaces/msg/slam_chunk.hpp</label>
      </node>
      <node id="27">
        <label>interfaces/msg/slam_pose.hpp</label>
      </node>
      <node id="19">
        <label>memory</label>
      </node>
      <node id="22">
        <label>message_filters/subscriber.h</label>
      </node>
      <node id="24">
        <label>message_filters/sync_policies/approximate_time.h</label>
      </node>
      <node id="23">
        <label>message_filters/synchronizer.h</label>
      </node>
      <node id="20">
        <label>optional</label>
      </node>
      <node id="21">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="36">
        <label>sensor_msgs/msg/nav_sat_fix.hpp</label>
      </node>
      <node id="37">
        <label>std_msgs/msg/string.hpp</label>
      </node>
      <node id="47">
        <label>string</label>
      </node>
      <node id="49">
        <label>tuple</label>
      </node>
      <node id="39">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceslam">slam</innernamespace>
    <briefdescription>
<para>Contains implementation of the slamISAM class, which handles iSAM2-based SLAM updates for autonomous vehicle landmark mapping using cone observations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="isam2_8hpp" kindref="compound">isam2.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceslam" kindref="compound">slam</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>slamISAM::init_noise_models(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;yaml_params::NoiseInputs&gt;<sp/>&amp;yaml_noise_inputs)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LandmarkNoiseModel<sp/>=<sp/>gtsam::Vector(2);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OdomNoiseModel<sp/>=<sp/>gtsam::Vector(3);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorNoiseModel<sp/>=<sp/>gtsam::Vector(3);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryNoiseModel<sp/>=<sp/>gtsam::Vector(2);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!yaml_noise_inputs.has_value())<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="namespaceslam_1aebac8ff6e81586b3187a1e1b1f472449ae4438a611ac230ecdb056c4f171bc547" kindref="member">RunSettings::ControlsSim</ref>)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceslam_1aebac8ff6e81586b3187a1e1b1f472449a7f80fcc452c2f1ed2bb51b39d0864df1" kindref="member">RunSettings::Real</ref>:</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LandmarkNoiseModel(0)<sp/>=<sp/><ref refid="constants_8hpp_1a2924395ddfcb0a0ee772330a11645707" kindref="member">BEARING_STD_DEV</ref>;<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LandmarkNoiseModel(1)<sp/>=<sp/><ref refid="constants_8hpp_1ac8b3500acbbbbe79157d399cf5470083" kindref="member">RANGE_STD_DEV</ref>;<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OdomNoiseModel(0)<sp/>=<sp/><ref refid="constants_8hpp_1a679a0a7bca83d5a467b7375c350099b6" kindref="member">IMU_X_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OdomNoiseModel(1)<sp/>=<sp/><ref refid="constants_8hpp_1ad70c10b51b08f27558f07b7c271d71cc" kindref="member">IMU_Y_STD_DEV</ref>;<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OdomNoiseModel(2)<sp/>=<sp/><ref refid="constants_8hpp_1a1852f50e788c3ea01e25a3d3794f074a" kindref="member">IMU_HEADING_STD_DEV</ref>;<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>be<sp/>all<sp/>0s<sp/>for<sp/>EUFS_SIM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorNoiseModel(0)<sp/>=<sp/><ref refid="constants_8hpp_1a679a0a7bca83d5a467b7375c350099b6" kindref="member">IMU_X_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorNoiseModel(1)<sp/>=<sp/><ref refid="constants_8hpp_1ad70c10b51b08f27558f07b7c271d71cc" kindref="member">IMU_Y_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorNoiseModel(2)<sp/>=<sp/><ref refid="constants_8hpp_1a1852f50e788c3ea01e25a3d3794f074a" kindref="member">IMU_HEADING_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryNoiseModel(0)<sp/>=<sp/><ref refid="constants_8hpp_1a6bbb347325e8ba0244109a63faeaa935" kindref="member">GPS_X_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryNoiseModel(1)<sp/>=<sp/><ref refid="constants_8hpp_1a47940d04a5651b198450d2e69ba7af8d" kindref="member">GPS_Y_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceslam_1aebac8ff6e81586b3187a1e1b1f472449a69d734ae5c73fbb6a4d4221bb5ba20c6" kindref="member">RunSettings::EUFSSim</ref>:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LandmarkNoiseModel(0)<sp/>=<sp/><ref refid="constants_8hpp_1a271deb105c69c414e6cd3c2fdcb0e2ed" kindref="member">EUFS_SIM_BEARING_STD_DEV</ref>;<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LandmarkNoiseModel(1)<sp/>=<sp/><ref refid="constants_8hpp_1aa83e05f48d5afbff7ba7953ff53fcda0" kindref="member">EUFS_SIM_RANGE_STD_DEV</ref>;<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OdomNoiseModel(0)<sp/>=<sp/><ref refid="constants_8hpp_1ad66c11e75ed8a6e2974a091683386385" kindref="member">EUFS_SIM_IMU_X_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OdomNoiseModel(1)<sp/>=<sp/><ref refid="constants_8hpp_1a08837ca2af62fea012e8a96f2f0c7e2c" kindref="member">EUFS_SIM_IMU_Y_STD_DEV</ref>;<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OdomNoiseModel(2)<sp/>=<sp/><ref refid="constants_8hpp_1a856fd37f34cee0cc4239095eae920928" kindref="member">EUFS_SIM_IMU_HEADING_STD_DEV</ref>;<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>be<sp/>all<sp/>0s<sp/>for<sp/>EUFS_SIM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorNoiseModel(0)<sp/>=<sp/><ref refid="constants_8hpp_1ad66c11e75ed8a6e2974a091683386385" kindref="member">EUFS_SIM_IMU_X_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorNoiseModel(1)<sp/>=<sp/><ref refid="constants_8hpp_1a08837ca2af62fea012e8a96f2f0c7e2c" kindref="member">EUFS_SIM_IMU_Y_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorNoiseModel(2)<sp/>=<sp/><ref refid="constants_8hpp_1a856fd37f34cee0cc4239095eae920928" kindref="member">EUFS_SIM_IMU_HEADING_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryNoiseModel(0)<sp/>=<sp/><ref refid="constants_8hpp_1a631bf87e31487c5be02ca6ad6136989f" kindref="member">EUFS_SIM_GPS_X_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryNoiseModel(1)<sp/>=<sp/><ref refid="constants_8hpp_1aa74d482d09776edaba3cb6dcc3483517" kindref="member">EUFS_SIM_GPS_Y_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceslam_1aebac8ff6e81586b3187a1e1b1f472449ae4438a611ac230ecdb056c4f171bc547" kindref="member">RunSettings::ControlsSim</ref>:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LandmarkNoiseModel(0)<sp/>=<sp/><ref refid="constants_8hpp_1a48fe76edf3d4052e13fb5eb7f78d6041" kindref="member">CONTROLS_BEARING_STD_DEV</ref>;<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LandmarkNoiseModel(1)<sp/>=<sp/><ref refid="constants_8hpp_1a0d749f36aa999ff4b92f6846382d28bf" kindref="member">CONTROLS_RANGE_STD_DEV</ref>;<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OdomNoiseModel(0)<sp/>=<sp/><ref refid="constants_8hpp_1aeb569da46685a0ac3d50a5b2df0e942f" kindref="member">CONTROLS_IMU_X_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OdomNoiseModel(1)<sp/>=<sp/><ref refid="constants_8hpp_1a2683260f82b8cac447caf0ba005f8867" kindref="member">CONTROLS_IMU_Y_STD_DEV</ref>;<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OdomNoiseModel(2)<sp/>=<sp/><ref refid="constants_8hpp_1a9a9e84e70043eb7c6fa339aa6fbf9312" kindref="member">CONTROLS_IMU_HEADING_STD_DEV</ref>;<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>be<sp/>all<sp/>0s<sp/>for<sp/>EUFS_SIM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorNoiseModel(0)<sp/>=<sp/><ref refid="constants_8hpp_1aeb569da46685a0ac3d50a5b2df0e942f" kindref="member">CONTROLS_IMU_X_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorNoiseModel(1)<sp/>=<sp/><ref refid="constants_8hpp_1a2683260f82b8cac447caf0ba005f8867" kindref="member">CONTROLS_IMU_Y_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorNoiseModel(2)<sp/>=<sp/><ref refid="constants_8hpp_1a9a9e84e70043eb7c6fa339aa6fbf9312" kindref="member">CONTROLS_IMU_HEADING_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryNoiseModel(0)<sp/>=<sp/><ref refid="constants_8hpp_1ab1b6ba4c39c3abd3449ad16f206d4b4b" kindref="member">CONTROLS_GPS_X_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryNoiseModel(1)<sp/>=<sp/><ref refid="constants_8hpp_1a740f6ff9eb90da92717472c307e8d073" kindref="member">CONTROLS_GPS_Y_STD_DEV</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LandmarkNoiseModel(0)<sp/>=<sp/>yaml_noise_inputs.value().yaml_bearing_std_dev;<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LandmarkNoiseModel(1)<sp/>=<sp/>yaml_noise_inputs.value().yaml_range_std_dev;<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OdomNoiseModel(0)<sp/>=<sp/>yaml_noise_inputs.value().yaml_imu_x_std_dev;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OdomNoiseModel(1)<sp/>=<sp/>yaml_noise_inputs.value().yaml_imu_y_std_dev;<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OdomNoiseModel(2)<sp/>=<sp/>yaml_noise_inputs.value().yaml_imu_heading_std_dev;<sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>be<sp/>all<sp/>0s<sp/>for<sp/>EUFS_SIM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorNoiseModel(0)<sp/>=<sp/>yaml_noise_inputs.value().yaml_prior_imu_x_std_dev;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorNoiseModel(1)<sp/>=<sp/>yaml_noise_inputs.value().yaml_prior_imu_y_std_dev;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorNoiseModel(2)<sp/>=<sp/>yaml_noise_inputs.value().yaml_prior_imu_heading_std_dev;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryNoiseModel(0)<sp/>=<sp/>yaml_noise_inputs.value().yaml_gps_x_std_dev;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryNoiseModel(1)<sp/>=<sp/>yaml_noise_inputs.value().yaml_gps_y_std_dev;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>slamISAM::init_tunable_constants(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;yaml_params::NoiseInputs&gt;<sp/>&amp;yaml_noise_inputs)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(yaml_noise_inputs.has_value()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>look_radius<sp/>=<sp/>yaml_noise_inputs.value().yaml_look_radius;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_cones_update_all<sp/>=<sp/>yaml_noise_inputs.value().yaml_min_cones_update_all;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_update<sp/>=<sp/>yaml_noise_inputs.value().yaml_window_update;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_start_n<sp/>=<sp/>yaml_noise_inputs.value().yaml_update_start_n;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_recent_n<sp/>=<sp/>yaml_noise_inputs.value().yaml_update_recent_n;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imu_offset<sp/>=<sp/>yaml_noise_inputs.value().yaml_imu_offset;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lidar_offset<sp/>=<sp/>yaml_noise_inputs.value().yaml_lidar_offset;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_cone_range<sp/>=<sp/>yaml_noise_inputs.value().yaml_max_cone_range;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>turning_max_cone_range<sp/>=<sp/>yaml_noise_inputs.value().yaml_turning_max_cone_range;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_from_start_loop_closure_th<sp/>=<sp/>yaml_noise_inputs.value().yaml_dist_from_start_loop_closure_th;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dist_th<sp/>=<sp/>yaml_noise_inputs.value().yaml_m_dist_th;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>turning_m_dist_th<sp/>=<sp/>yaml_noise_inputs.value().yaml_turning_m_dist_th;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_iterations_n<sp/>=<sp/>yaml_noise_inputs.value().yaml_update_iterations_n;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_n_cones<sp/>=<sp/>yaml_noise_inputs.value().yaml_return_n_cones;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>look_radius<sp/>=<sp/><ref refid="constants_8hpp_1ad2621efbf689d237023ac588d4adac1d" kindref="member">LOOK_RADIUS</ref>;<sp/></highlight><highlight class="comment">//<sp/>tell<sp/>us<sp/>how<sp/>many<sp/>cones<sp/>back<sp/>and<sp/>forth<sp/>to<sp/>update<sp/>in<sp/>slam_est</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_cones_update_all<sp/>=<sp/><ref refid="constants_8hpp_1acd9de2a135b49ab524844ec7ea918525" kindref="member">MIN_CONES_UPDATE_ALL</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_update<sp/>=<sp/><ref refid="constants_8hpp_1a7b7e67ce964f45fdb26f2d776bfbb1d6" kindref="member">WINDOW_UPDATE</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_start_n<sp/>=<sp/><ref refid="constants_8hpp_1a71a806ef167dbaf2ce22355d7a2c0d9f" kindref="member">UPDATE_START_N</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_recent_n<sp/>=<sp/><ref refid="constants_8hpp_1aadf34d16837e6f05ddfd90d6ad578fd2" kindref="member">UPDATE_RECENT_N</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imu_offset<sp/>=<sp/><ref refid="constants_8hpp_1ac9d2880719f12dcb9d8981a27b13cb4d" kindref="member">IMU_OFFSET</ref>;<sp/></highlight><highlight class="comment">//meters;<sp/>offset<sp/>from<sp/>the<sp/>center<sp/>of<sp/>the<sp/>car</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lidar_offset<sp/>=<sp/><ref refid="constants_8hpp_1aadcb9d89b1ef0bbe27f2784462178ff9" kindref="member">LIDAR_OFFSET</ref>;<sp/></highlight><highlight class="comment">//meters;<sp/>offset<sp/>from<sp/>the<sp/>center<sp/>of<sp/>the<sp/>car</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_cone_range<sp/>=<sp/><ref refid="constants_8hpp_1ada42544decc969afd04148fb0b684114" kindref="member">MAX_CONE_RANGE</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>turning_max_cone_range<sp/>=<sp/><ref refid="constants_8hpp_1a89c80a289dc717aaa5f6a6c4dd171e42" kindref="member">TURNING_MAX_CONE_RANGE</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_from_start_loop_closure_th<sp/>=<sp/><ref refid="constants_8hpp_1a8434f7b2f400eb70a451eb2f8b2a74ce" kindref="member">DIST_FROM_START_LOOP_CLOSURE_TH</ref>;<sp/></highlight><highlight class="comment">//meters;<sp/>distance<sp/>from<sp/>the<sp/>start<sp/>for<sp/>loop<sp/>closure<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dist_th<sp/>=<sp/><ref refid="constants_8hpp_1a65c24ee9176f2806a19bd1d1f2ab041e" kindref="member">M_DIST_TH</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>turning_m_dist_th<sp/>=<sp/><ref refid="constants_8hpp_1a352e28edf7c9a17454772a568c05b7ba" kindref="member">TURNING_M_DIST_TH</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_iterations_n<sp/>=<sp/><ref refid="constants_8hpp_1ac4763eb36d3d9b8e98581a24967ecac3" kindref="member">UPDATE_ITERATIONS_N</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_n_cones<sp/>=<sp/><ref refid="constants_8hpp_1a5e3ba1fdbe5063e8131fd6a3a9cf5b8b" kindref="member">RETURN_N_CONES</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>slamISAM::init_params(std::optional&lt;rclcpp::Logger&gt;<sp/>input_logger)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initializing<sp/>iSAM2<sp/>model<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/>=<sp/>gtsam::ISAM2Params(gtsam::ISAM2DoglegParams(),0.1,10,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters.setFactorization(</highlight><highlight class="stringliteral">&quot;QR&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger<sp/>=<sp/>input_logger;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isam2<sp/>=<sp/>std::make_shared&lt;gtsam::ISAM2&gt;(gtsam::ISAM2(parameters));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph<sp/>=<sp/>gtsam::NonlinearFactorGraph();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>=<sp/>gtsam::Values();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blue_slam_est_and_mcov<sp/>=<sp/>SLAMEstAndMCov(isam2,<sp/>&amp;BLUE_L,<sp/>look_radius,<sp/>update_iterations_n);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yellow_slam_est_and_mcov<sp/>=<sp/>SLAMEstAndMCov(isam2,<sp/>&amp;YELLOW_L,<sp/>look_radius,<sp/>update_iterations_n);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose_num<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_pose_added<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Consider<sp/>moving<sp/>this<sp/>to<sp/>SLAMEstAndMCov</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blue_checkpoint_id<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yellow_checkpoint_id<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>closure<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loop_closure<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_lap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lap_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classslam_1_1slamISAM_1a339835603720c6ba0db771b8fd9a8828" kindref="member">slamISAM::slamISAM</ref>(std::optional&lt;rclcpp::Logger&gt;<sp/>input_logger,<sp/>std::optional&lt;yaml_params::NoiseInputs&gt;<sp/>&amp;yaml_noise_inputs)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initializing<sp/>SLAM<sp/>Parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_noise_models(yaml_noise_inputs);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_tunable_constants(yaml_noise_inputs);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_params(input_logger);<sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_params_in_use(yaml_noise_inputs.has_value());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>landmark_model<sp/>=<sp/>gtsam::noiseModel::Diagonal::Sigmas(LandmarkNoiseModel);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>odom_model<sp/>=<sp/>gtsam::noiseModel::Diagonal::Sigmas(OdomNoiseModel);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prior_model<sp/>=<sp/>gtsam::noiseModel::Diagonal::Sigmas(PriorNoiseModel);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unary_model<sp/>=<sp/>gtsam::noiseModel::Diagonal::Sigmas(UnaryNoiseModel);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>gtsam::Symbol<sp/>slamISAM::X(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>robot_pose_id)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gtsam::Symbol(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">,<sp/>robot_pose_id);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>gtsam::Symbol<sp/>slamISAM::BLUE_L(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cone_id)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gtsam::Symbol(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>cone_id);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>gtsam::Symbol<sp/>slamISAM::YELLOW_L(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cone_id)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gtsam::Symbol(</highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">,<sp/>cone_id);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>slamISAM::log_params_in_use(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>yaml_has_value)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yaml_has_value)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/></highlight><highlight class="stringliteral">&quot;--------Using<sp/>yaml<sp/>file<sp/>--------\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="constants_8hpp_1a3ec98e2c4e8966f70c9f3d2d6468740e" kindref="member">DEBUG_PARAMS_IN_USE</ref>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/></highlight><highlight class="stringliteral">&quot;--------Using<sp/>default<sp/>params<sp/>--------\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="constants_8hpp_1a3ec98e2c4e8966f70c9f3d2d6468740e" kindref="member">DEBUG_PARAMS_IN_USE</ref>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;look_radius:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>look_radius),<sp/><ref refid="constants_8hpp_1a3ec98e2c4e8966f70c9f3d2d6468740e" kindref="member">DEBUG_PARAMS_IN_USE</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;min_cones_update_all:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>min_cones_update_all),<sp/><ref refid="constants_8hpp_1a3ec98e2c4e8966f70c9f3d2d6468740e" kindref="member">DEBUG_PARAMS_IN_USE</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;window_update:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>window_update),<sp/><ref refid="constants_8hpp_1a3ec98e2c4e8966f70c9f3d2d6468740e" kindref="member">DEBUG_PARAMS_IN_USE</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;imu_offset:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>imu_offset),<sp/><ref refid="constants_8hpp_1a3ec98e2c4e8966f70c9f3d2d6468740e" kindref="member">DEBUG_PARAMS_IN_USE</ref>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;max_cone_range:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>max_cone_range),<sp/><ref refid="constants_8hpp_1a3ec98e2c4e8966f70c9f3d2d6468740e" kindref="member">DEBUG_PARAMS_IN_USE</ref>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;m_dist_th:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>m_dist_th),<sp/><ref refid="constants_8hpp_1a3ec98e2c4e8966f70c9f3d2d6468740e" kindref="member">DEBUG_PARAMS_IN_USE</ref>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;turning_m_dist_th:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>turning_m_dist_th),<sp/><ref refid="constants_8hpp_1a3ec98e2c4e8966f70c9f3d2d6468740e" kindref="member">DEBUG_PARAMS_IN_USE</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;update_iterations_n:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>update_iterations_n),<sp/><ref refid="constants_8hpp_1a3ec98e2c4e8966f70c9f3d2d6468740e" kindref="member">DEBUG_PARAMS_IN_USE</ref>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>gtsam::Pose2<sp/>slamISAM::update_poses(</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;gtsam::Point2&gt;<sp/>gps_position,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Pose2<sp/>velocity,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt,<sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rclcpp::Logger&gt;<sp/>logger</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/></highlight><highlight class="stringliteral">&quot;--------update_poses--------\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="constants_8hpp_1a0cfbdb0241e2d233010097154e8e186a" kindref="member">DEBUG_POSES</ref>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Adding<sp/>poses<sp/>to<sp/>the<sp/>SLAM<sp/>factor<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Point2<sp/>offset_xy<sp/>=<sp/><ref refid="namespacemotion__modeling_1a957433c974fcf73b2a3807728ed19cd3" kindref="member">motion_modeling::calc_offset_imu_to_car_center</ref>(yaw);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>offset_x<sp/>=<sp/>offset_xy.x();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>offset_y<sp/>=<sp/>offset_xy.y();<sp/></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pose_num<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/></highlight><highlight class="stringliteral">&quot;Processing<sp/>first<sp/>pose&quot;</highlight><highlight class="normal">,<sp/><ref refid="constants_8hpp_1a0cfbdb0241e2d233010097154e8e186a" kindref="member">DEBUG_POSES</ref>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_pose<sp/>=<sp/>gps_position.has_value()<sp/>?<sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Pose2(gps_position.value().x()<sp/>-offset_x,<sp/>gps_position.value().y()<sp/>-offset_y,<sp/>yaw)<sp/>:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Pose2(-offset_x,<sp/>-offset_y,<sp/>yaw);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::PriorFactor&lt;gtsam::Pose2&gt;<sp/>prior_factor<sp/>=<sp/>gtsam::PriorFactor&lt;gtsam::Pose2&gt;(X(0),<sp/>first_pose,<sp/>prior_model);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.add(prior_factor);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values.insert(X(0),<sp/>first_pose);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_pose_added<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ASSUMES<sp/>THAT<sp/>YOU<sp/>SEE<sp/>ORANGE<sp/>CONES<sp/>ON<sp/>YOUR<sp/>FIRST<sp/>MEASUREMENT<sp/>OF<sp/>LANDMARKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>orange<sp/>cone<sp/>left<sp/>and<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//hopefully<sp/>it&apos;s<sp/>only<sp/>2<sp/>cones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/></highlight><highlight class="stringliteral">&quot;Finished<sp/>processing<sp/>first<sp/>pose&quot;</highlight><highlight class="normal">,<sp/><ref refid="constants_8hpp_1a0cfbdb0241e2d233010097154e8e186a" kindref="member">DEBUG_POSES</ref>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Pose2<sp/>prev_pose<sp/>=<sp/>isam2-&gt;calculateEstimate(X(pose_num<sp/>-<sp/>1)).cast&lt;gtsam::Pose2&gt;();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;\tprev_pose<sp/>|<sp/>x:<sp/>{}<sp/>|<sp/>y:<sp/>{}<sp/>|<sp/>yaw:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>prev_pose.x(),<sp/>prev_pose.y(),<sp/>prev_pose.theta()),<sp/><ref refid="constants_8hpp_1a0cfbdb0241e2d233010097154e8e186a" kindref="member">DEBUG_POSES</ref>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;gtsam::Pose2,<sp/>gtsam::Pose2&gt;<sp/>new_pose_and_odom<sp/>=<sp/><ref refid="namespacemotion__modeling_1a66146b526c37cb7eff7a748a928730c2" kindref="member">motion_modeling::velocity_motion_model</ref>(velocity,<sp/>dt,<sp/>prev_pose,<sp/>yaw);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Pose2<sp/>new_pose<sp/>=<sp/>gtsam::Pose2(new_pose_and_odom.first.x()<sp/>-<sp/>offset_x,<sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_pose_and_odom.first.y()<sp/>-<sp/>offset_y,<sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_pose_and_odom.first.theta());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Pose2<sp/>odometry<sp/>=<sp/>new_pose_and_odom.second;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::BetweenFactor&lt;gtsam::Pose2&gt;<sp/>odom_factor<sp/>=<sp/>gtsam::BetweenFactor&lt;gtsam::Pose2&gt;(X(pose_num<sp/>-<sp/>1),</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X(pose_num),</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>odometry,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>odom_model);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.add(odom_factor);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gps_position.has_value())<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Pose2<sp/>imu_offset_gps_position<sp/>=<sp/>gtsam::Pose2(gps_position.value().x()<sp/>-<sp/>offset_x,<sp/>gps_position.value().y()<sp/>-<sp/>offset_y,<sp/>yaw);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.emplace_shared&lt;UnaryFactor&gt;(X(pose_num),<sp/>imu_offset_gps_position,<sp/>unary_model);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values.insert(X(pose_num),<sp/>new_pose);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isam2-&gt;update(graph,<sp/>values);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.resize(0);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values.clear();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>update_iterations_n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>the<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isam2-&gt;update();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pose_num<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first_pose;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isam2-&gt;calculateEstimate(X(pose_num)).cast&lt;gtsam::Pose2&gt;();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>slamISAM::update_landmarks(</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;data_association_utils::OldConeInfo&gt;<sp/>&amp;old_cones,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;data_association_utils::NewConeInfo&gt;<sp/>&amp;new_cones,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Pose2<sp/>cur_pose,<sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslam_1_1SLAMEstAndMCov" kindref="compound">SLAMEstAndMCov</ref><sp/>&amp;slam_est_and_mcov)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bearing<sp/>range<sp/>factor<sp/>will<sp/>need</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Types<sp/>for<sp/>car<sp/>pose<sp/>to<sp/>landmark<sp/>node<sp/>(Pose2,<sp/>Point2)</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Bearing<sp/>of<sp/>type<sp/>Rot2<sp/>(Rot2<sp/>fromAngle)</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Range<sp/>of<sp/>type<sp/>double</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Look<sp/>at<sp/>PlanarSLAM<sp/>example<sp/>in<sp/>gtsam</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>When<sp/>adding<sp/>values:</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>insert<sp/>Point2<sp/>for<sp/>the<sp/>cones<sp/>and<sp/>their<sp/>actual<sp/>location</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>o<sp/>=<sp/>0;<sp/>o<sp/>&lt;<sp/>old_cones.size();<sp/>o++)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Point2<sp/>cone_pos_car_frame<sp/>=<sp/>old_cones.at(o).local_cone_pos;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_id<sp/>=<sp/>(old_cones.at(o)).min_id;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Rot2<sp/>b<sp/>=<sp/>gtsam::Rot2::fromAngle((old_cones.at(o)).bearing);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>gtsam::norm2(cone_pos_car_frame);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Symbol<sp/>landmark_symbol<sp/>=<sp/>slam_est_and_mcov.get_landmark_symbol(min_id);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.add(gtsam::BearingRangeFactor&lt;gtsam::Pose2,<sp/>gtsam::Point2&gt;(X(pose_num),<sp/>landmark_symbol,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>landmark_model));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isam2-&gt;update(graph,<sp/>values);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.resize(0);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>should<sp/>be<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>cur_n_landmarks<sp/>=<sp/>slam_est_and_mcov.get_n_landmarks();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>new_cones.size();<sp/>n++)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Point2<sp/>cone_pos_car_frame<sp/>=<sp/>(new_cones.at(n).local_cone_pos);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Rot2<sp/>b<sp/>=<sp/>gtsam::Rot2::fromAngle((new_cones.at(n)).bearing);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>gtsam::norm2(cone_pos_car_frame);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Point2<sp/>cone_global_frame<sp/>=<sp/>(new_cones.at(n).global_cone_pos);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Symbol<sp/>landmark_symbol<sp/>=<sp/>slam_est_and_mcov.get_landmark_symbol(cur_n_landmarks);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.add(gtsam::BearingRangeFactor&lt;gtsam::Pose2,<sp/>gtsam::Point2&gt;(X(pose_num),<sp/>landmark_symbol,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>landmark_model));</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values.insert(landmark_symbol,<sp/>cone_global_frame);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_n_landmarks++;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>All<sp/>values<sp/>in<sp/>graph<sp/>must<sp/>be<sp/>in<sp/>values<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values.insert(X(pose_num),<sp/>cur_pose);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Values<sp/>optimized_val<sp/>=<sp/>gtsam::LevenbergMarquardtOptimizer(graph,<sp/>values).optimize();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized_val.erase(X(pose_num));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isam2-&gt;update(graph,<sp/>optimized_val);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.resize(0);<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>resizing<sp/>your<sp/>graph<sp/>will<sp/>result<sp/>in<sp/>long<sp/>update<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values.clear();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>and<sp/>recalculate<sp/>estimates<sp/>in<sp/>slam_est_and_mcov<sp/>after<sp/>updating<sp/>the<sp/>iSAM2<sp/>model<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_cones.size()<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(min_cones_update_all))<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>old_cone_ids(old_cones.size());</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>old_cones.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_cone_ids.at(i)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(old_cones.at(i).min_id);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slam_est_and_mcov.update_with_old_cones(old_cone_ids);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slam_est_and_mcov.update_and_recalculate_all();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slam_est_and_mcov.update_with_new_cones(new_cones.size());</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceslam_1a74c5ff6a5f23be28ef1b570f909b8449" kindref="member">slam_output_t</ref><sp/>slamISAM::get_recent_SLAM_estimates<sp/>(gtsam::Pose2<sp/>cur_pose)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>geometry_points_blue<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>geometry_points_yellow<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;gtsam::Point2&gt;<sp/>blue_slam_est<sp/>=<sp/>blue_slam_est_and_mcov.get_all_est();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;gtsam::Point2&gt;<sp/>yellow_slam_est<sp/>=<sp/>yellow_slam_est_and_mcov.get_all_est();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>less<sp/>than<sp/>N<sp/>cones,<sp/>take<sp/>the<sp/>entire<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>take<sp/>N<sp/>most<sp/>recent<sp/>(from<sp/>back)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blue_slam_est.size()<sp/>&lt;<sp/>return_n_cones)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_points_blue<sp/>=<sp/><ref refid="namespaceros__msg__conversions_1ae2942353ab0b099167eb67145f231e16" kindref="member">ros_msg_conversions::slam_est_to_points</ref>(blue_slam_est,<sp/>cur_pose);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;gtsam::Point2&gt;<sp/>last_n_blue(blue_slam_est.end()<sp/>-<sp/>return_n_cones,<sp/>blue_slam_est.end());</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_points_blue<sp/>=<sp/><ref refid="namespaceros__msg__conversions_1ae2942353ab0b099167eb67145f231e16" kindref="member">ros_msg_conversions::slam_est_to_points</ref>(last_n_blue,<sp/>cur_pose);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yellow_slam_est.size()<sp/>&lt;<sp/>return_n_cones){</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_points_yellow<sp/>=<sp/><ref refid="namespaceros__msg__conversions_1ae2942353ab0b099167eb67145f231e16" kindref="member">ros_msg_conversions::slam_est_to_points</ref>(yellow_slam_est,<sp/>cur_pose);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;gtsam::Point2&gt;<sp/>last_n_yellow(yellow_slam_est.end()<sp/>-<sp/>return_n_cones,<sp/>yellow_slam_est.end());</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_points_yellow<sp/>=<sp/><ref refid="namespaceros__msg__conversions_1ae2942353ab0b099167eb67145f231e16" kindref="member">ros_msg_conversions::slam_est_to_points</ref>(last_n_yellow,<sp/>cur_pose);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>final_pose<sp/>=<sp/>geometry_msgs::msg::Point();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>final_pose.x<sp/>=<sp/>cur_pose.x();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>final_pose.y<sp/>=<sp/>cur_pose.y();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>final_pose.z<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(geometry_points_blue,<sp/>geometry_points_yellow,<sp/>final_pose);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceslam_1a74c5ff6a5f23be28ef1b570f909b8449" kindref="member">slam_output_t</ref><sp/><ref refid="classslam_1_1slamISAM_1a59469d87c99142bec093ab4a13c9cff5" kindref="member">slamISAM::step</ref>(</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;gtsam::Point2&gt;<sp/>gps_opt,<sp/></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;gtsam::Point2&gt;<sp/>&amp;cone_obs_blue,<sp/></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;gtsam::Point2&gt;<sp/>&amp;cone_obs_yellow,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;gtsam::Point2&gt;<sp/>&amp;orange_ref_cones,<sp/></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Pose2<sp/>velocity,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>old_blue_n_landmarks<sp/>=<sp/>blue_slam_est_and_mcov.get_n_landmarks();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>old_yellow_n_landmarks<sp/>=<sp/>yellow_slam_est_and_mcov.get_n_landmarks();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_blue_n_landmarks<sp/>+<sp/>old_yellow_n_landmarks<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_step<sp/><sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dur_betw_step<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(start_step<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>logging_utils::log_string(logger,<sp/>fmt::format(&quot;--------End<sp/>of<sp/>prev<sp/>step.<sp/>Time<sp/>between<sp/>step<sp/>calls:<sp/>{}--------\n\n&quot;,<sp/>dur_betw_step.count()),<sp/>DEBUG_STEP);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/></highlight><highlight class="stringliteral">&quot;--------Start<sp/>of<sp/>SLAM<sp/>Step--------&quot;</highlight><highlight class="normal">,<sp/><ref refid="constants_8hpp_1af7ce9f70fb089c8e2d25a37f15d2d18b" kindref="member">DEBUG_STEP</ref>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;bool,<sp/>bool&gt;<sp/>movement_info<sp/>=<sp/><ref refid="namespacemotion__modeling_1ab6ec7b19eb78645dec9adf9e6aaa5966" kindref="member">motion_modeling::determine_movement</ref>(velocity);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_moving<sp/>=<sp/>movement_info.first;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_turning<sp/>=<sp/>movement_info.second;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Quit<sp/>the<sp/>update<sp/>step<sp/>if<sp/>the<sp/>car<sp/>is<sp/>not<sp/>moving*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_moving<sp/>&amp;&amp;<sp/>pose_num<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Pose2<sp/>cur_pose<sp/>=<sp/>isam2-&gt;calculateEstimate(X(pose_num<sp/>-<sp/>1)).cast&lt;gtsam::Pose2&gt;();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_recent_SLAM_estimates(cur_pose);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/****<sp/>Update<sp/>the<sp/>car<sp/>pose<sp/>****/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_update_poses<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Pose2<sp/>cur_pose<sp/>=<sp/>update_poses(gps_opt,<sp/>yaw,<sp/>velocity,<sp/>dt,<sp/>logger);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_update_poses<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dur_update_poses<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end_update_poses<sp/>-<sp/>start_update_poses);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;\tUpdate_poses<sp/>time:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>dur_update_poses.count())<sp/>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/****<sp/>Perform<sp/>loop<sp/>closure<sp/>****/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_loop_closure<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>prev_new_lap_value<sp/>=<sp/>new_lap;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_lap<sp/>=<sp/><ref refid="namespaceloop__closure__utils_1acf73e33a4333dddf3b0e1f89a25c3148" kindref="member">loop_closure_utils::detect_loop_closure</ref>(dist_from_start_loop_closure_th,<sp/>cur_pose,<sp/>first_pose,<sp/>pose_num,<sp/>logger);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!loop_closure<sp/>&amp;&amp;<sp/>new_lap)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loop_closure<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>update_iterations_n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isam2-&gt;update();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>completed_new_lap<sp/>=<sp/>prev_new_lap_value<sp/>&amp;&amp;<sp/>!new_lap<sp/>&amp;&amp;<sp/>!<ref refid="namespaceloop__closure__utils_1ae21fdb252c15e783c9be0dae81ba9457" kindref="member">loop_closure_utils::start_pose_in_front</ref>(cur_pose,<sp/>first_pose,<sp/>logger);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(completed_new_lap)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lap_count++;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_loop_closure<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dur_loop_closure<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end_loop_closure<sp/>-<sp/>start_loop_closure);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;\tLoop<sp/>closure<sp/>time:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>dur_loop_closure.count()),<sp/><ref refid="constants_8hpp_1af7ce9f70fb089c8e2d25a37f15d2d18b" kindref="member">DEBUG_STEP</ref>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(loop_closure)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/></highlight><highlight class="stringliteral">&quot;\tLoop<sp/>closure<sp/>detected.<sp/>No<sp/>longer<sp/>updating&quot;</highlight><highlight class="normal">,<sp/><ref refid="constants_8hpp_1af7ce9f70fb089c8e2d25a37f15d2d18b" kindref="member">DEBUG_STEP</ref>);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/****<sp/>Retrieve<sp/>the<sp/>old<sp/>cones<sp/>SLAM<sp/>estimates<sp/>&amp;<sp/>marginal<sp/>covariance<sp/>matrices<sp/>****/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!loop_closure)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/****<sp/>Data<sp/>association<sp/>****/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_DA<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>numerical<sp/>stability,<sp/>update<sp/>all<sp/>estimates<sp/>and<sp/>marginal<sp/>covariances<sp/>when<sp/>few<sp/>cones<sp/>seen<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_seen_cones<sp/>=<sp/>old_blue_n_landmarks<sp/>&gt;<sp/>0<sp/>||<sp/>old_yellow_n_landmarks<sp/>&gt;<sp/>0;<sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_seen_cones<sp/>&amp;&amp;<sp/>!(old_blue_n_landmarks<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(min_cones_update_all)<sp/>&amp;&amp;<sp/>old_yellow_n_landmarks<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(min_cones_update_all)))<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>update_iterations_n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isam2-&gt;update();</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blue_slam_est_and_mcov.update_and_recalculate_all();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yellow_slam_est_and_mcov.update_and_recalculate_all();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_dist_th_to_use<sp/>=<sp/>is_turning<sp/>?<sp/>turning_m_dist_th<sp/>:<sp/>m_dist_th;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cone_dist_th_to_use<sp/>=<sp/>is_turning<sp/>?<sp/>turning_max_cone_range<sp/>:<sp/>max_cone_range;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blue_data_association_info<sp/>=<sp/><ref refid="namespacedata__association__utils_1a6f7228a0a6bea9eb932a06b409ec2d3e" kindref="member">data_association_utils::perform_data_association</ref>(cur_pose,<sp/>cone_obs_blue,<sp/>logger,<sp/>blue_slam_est_and_mcov,<sp/>m_dist_th_to_use,<sp/>cone_dist_th_to_use);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;data_association_utils::OldConeInfo&gt;<sp/>blue_old_cones<sp/>=<sp/>blue_data_association_info.first;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;data_association_utils::NewConeInfo&gt;<sp/>blue_new_cones<sp/>=<sp/>blue_data_association_info.second;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>yellow_data_association_info<sp/>=<sp/><ref refid="namespacedata__association__utils_1a6f7228a0a6bea9eb932a06b409ec2d3e" kindref="member">data_association_utils::perform_data_association</ref>(cur_pose,<sp/>cone_obs_yellow,<sp/>logger,<sp/>yellow_slam_est_and_mcov,<sp/>m_dist_th_to_use,<sp/>cone_dist_th_to_use);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;data_association_utils::OldConeInfo&gt;<sp/>yellow_old_cones<sp/>=<sp/>yellow_data_association_info.first;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;data_association_utils::NewConeInfo&gt;<sp/>yellow_new_cones<sp/>=<sp/>yellow_data_association_info.second;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_DA<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dur_DA<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end_DA<sp/>-<sp/>start_DA);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;\tData<sp/>association<sp/>time:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>dur_DA.count()),<sp/><ref refid="constants_8hpp_1af7ce9f70fb089c8e2d25a37f15d2d18b" kindref="member">DEBUG_STEP</ref>);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_update_landmarks<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;\t\tStarted<sp/>updating<sp/>isam2<sp/>model<sp/>with<sp/>new<sp/>and<sp/>old<sp/>cones&quot;</highlight><highlight class="normal">),<sp/><ref refid="constants_8hpp_1af7ce9f70fb089c8e2d25a37f15d2d18b" kindref="member">DEBUG_STEP</ref>);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_landmarks(blue_old_cones,<sp/>blue_new_cones,<sp/>cur_pose,<sp/>blue_slam_est_and_mcov);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_landmarks(yellow_old_cones,<sp/>yellow_new_cones,<sp/>cur_pose,<sp/>yellow_slam_est_and_mcov);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;\t\tFinished<sp/>updating<sp/>isam2<sp/>model<sp/>with<sp/>new<sp/>and<sp/>old<sp/>cones&quot;</highlight><highlight class="normal">),<sp/><ref refid="constants_8hpp_1af7ce9f70fb089c8e2d25a37f15d2d18b" kindref="member">DEBUG_STEP</ref>);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_update_landmarks<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dur_update_landmarks<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end_update_landmarks<sp/>-<sp/>start_update_landmarks);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;\tUpdate_landmarks<sp/>time:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>dur_update_landmarks.count()),<sp/><ref refid="constants_8hpp_1af7ce9f70fb089c8e2d25a37f15d2d18b" kindref="member">DEBUG_STEP</ref>);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Logging<sp/>estimates<sp/>for<sp/>visualization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_vis_setup<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_estimates();</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_vis_setup<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dur_vis_setup<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end_vis_setup<sp/>-<sp/>start_vis_setup);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;\tVis_setup<sp/>time:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>dur_vis_setup.count()),<sp/><ref refid="constants_8hpp_1acab5aa8052556bc42799b17c45d58bf5" kindref="member">DEBUG_VIZ</ref>);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dur_step_call<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;\tSLAM<sp/>run<sp/>step<sp/>|<sp/>Step<sp/>call<sp/>time:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>dur_step_call.count()),<sp/><ref refid="constants_8hpp_1af7ce9f70fb089c8e2d25a37f15d2d18b" kindref="member">DEBUG_STEP</ref>);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelogging__utils_1a0e0bddea577907b98ab583c2de51cca6" kindref="member">logging_utils::log_string</ref>(logger,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;\tpose_num:<sp/>{}<sp/>|<sp/>blue_n_landmarks:<sp/>{}<sp/>|<sp/>yellow_n_landmarks<sp/>:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose_num,<sp/>blue_slam_est_and_mcov.get_n_landmarks(),<sp/>yellow_slam_est_and_mcov.get_n_landmarks()),<sp/><ref refid="constants_8hpp_1af7ce9f70fb089c8e2d25a37f15d2d18b" kindref="member">DEBUG_STEP</ref>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose_num++;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_recent_SLAM_estimates(cur_pose);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>slamISAM::print_estimates()<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>ofs;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ofs.open(<ref refid="constants_8hpp_1a408b6e210da50b4a34d8ae5bcef9e082" kindref="member">ESTIMATES_FILE</ref>,<sp/>std::ofstream::out<sp/>|<sp/>std::ofstream::trunc);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::streambuf<sp/>*coutbuf<sp/>=<sp/>std::cout.rdbuf();<sp/></highlight><highlight class="comment">//save<sp/>old<sp/>buf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout.rdbuf(ofs.rdbuf());</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>blue_n_landmarks<sp/>=<sp/>blue_slam_est_and_mcov.get_n_landmarks();</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>yellow_n_landmarks<sp/>=<sp/>yellow_slam_est_and_mcov.get_n_landmarks();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;gtsam::Point2&gt;<sp/>blue_slam_est<sp/>=<sp/>blue_slam_est_and_mcov.get_all_est();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;gtsam::Point2&gt;<sp/>yellow_slam_est<sp/>=<sp/>yellow_slam_est_and_mcov.get_all_est();</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);<sp/>i<sp/>&lt;<sp/>blue_n_landmarks;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Point2<sp/>blue_cone<sp/>=<sp/>blue_slam_est.at(i);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>b:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>blue_cone.x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>blue_cone.y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);<sp/>i<sp/>&lt;<sp/>yellow_n_landmarks;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Point2<sp/>yellow_cone<sp/>=<sp/>yellow_slam_est.at(i);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>y:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>yellow_cone.x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>yellow_cone.y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);<sp/>i<sp/>&lt;<sp/>pose_num;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gtsam::Pose2<sp/>cur_pose<sp/>=<sp/>isam2-&gt;calculateEstimate(X(i)).cast&lt;gtsam::Pose2&gt;();</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>x:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cur_pose.x()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cur_pose.y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ofs.close();</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout.rdbuf(coutbuf);<sp/></highlight><highlight class="comment">//reset<sp/>to<sp/>standard<sp/>output<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/isam2/isam2.cpp"/>
  </compounddef>
</doxygen>
